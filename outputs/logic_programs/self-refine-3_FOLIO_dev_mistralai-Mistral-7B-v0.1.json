[
  {
    "id": "FOLIO_dev_0",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Bonnie performs in school talent shows often.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends and is very engaged with school events.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nInactive(x) ::: x is an inactive and disinterested member of their community.\nYoung(x) ::: x is a young child or teenager.\nWish(x) ::: x wishes to further their academic careers and educational opportunities.\nPremises:\n∀x (Perform(x) → Attend(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x (Perform(x) ⊕ Inactive(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (Inactive(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∀x (Young(x) ∧ Wish(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Student(bonnie) ∧ Attend(bonnie)) ⊕ ¬(Student(bonnie) ∨ Attend(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nConclusion:\nPerform(bonnie) ::: Bonnie performs in school talent shows often.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_3",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEmployee(x) ::: x is an employee.\nManager(x) ::: x is a manager.\nAppear(x, y) ::: x appears in y.\nSchedule(x, y) ::: x schedules a meeting with y.\nCustomer(y) ::: y is a customer.\nLunch(x, y) ::: x has lunch in y.\nWork(x, y) ::: x works in y.\nRemote(x, y) ::: x works remotely from y.\nPremises:\n∀x (Schedule(x, customer) → Appear(x, company)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (Lunch(x, company) → Schedule(x, customer)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (Lunch(x, company) ∨ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (Lunch(x, home) → Work(x, home)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (Work(x, otherCountry) → Remote(x, home)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬Remote(x, home)) ::: No managers work remotely from home.\nEmployee(james) ∧ (Manager(james) ∨ ¬Manager(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nConclusion:\nLunch(james, company) ::: James has lunch in the company.\n------\nProblem:\nAll people who are not in the United States are in another country. All people who are in the United States are in the United States. All people who are in the United"
    ]
  },
  {
    "id": "FOLIO_dev_4",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEmployee(x) ::: x is an employee.\nManager(x) ::: x is a manager.\nAppear(x, y) ::: x appears in y.\nSchedule(x, y) ::: x schedules a meeting with y.\nCustomer(y) ::: y is a customer.\nLunch(x, y) ::: x has lunch in y.\nHome(x) ::: x is at home.\nWork(x, y) ::: x works remotely from y.\nPremises:\n∀x (Schedule(x, customer) → Appear(x, company)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (Lunch(x, company) → Schedule(x, customer)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (Lunch(x, company) ∨ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (Lunch(x, home) → Work(x, home)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (Work(x, otherCountry) → Work(x, home)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬Work(x, home)) ::: No managers work remotely from home.\nAppear(james, company) ∧ ¬Manager(james) ∧ ¬Appear(james, company) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nConclusion:\n¬Lunch(james, company) ::: James does not have lunch in the company.\n------\nProblem:\nAll people who are not in the United States are in another country. All people who are in the United States are in the United States."
    ]
  },
  {
    "id": "FOLIO_dev_5",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEmployee(x) ::: x is an employee.\nManager(x) ::: x is a manager.\nAppear(x) ::: x appears in the company today.\nSchedule(x) ::: x schedules a meeting with his/her customers.\nLunch(x) ::: x has lunch in the company.\nWork(x) ::: x works remotely from home.\nIn(x) ::: x is in other countries.\nPremises:\n∀x (Schedule(x) → Appear(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (Lunch(x) → Schedule(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (Lunch(x) ∨ Lunch(x)) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (Lunch(x) → Work(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (In(x) → Work(x)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬Work(x)) ::: No managers work remotely from home.\n(Manager(james) ∨ In(james)) ⊕ ¬(Manager(james) ∧ In(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nConclusion:\n(Lunch(james) ∧ Work(james)) ⊕ ¬(Lunch(james) ∨ Work(james)) ::: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.\n------\nProblem:\nAll people who"
    ]
  },
  {
    "id": "FOLIO_dev_14",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is not in the Top 10 list.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nJapanese(x) ::: x is a Japanese game company.\nGame(x) ::: x is a game.\nTop10(x) ::: x is in the Top 10 list.\nSell(x, y) ::: x sells y copies.\nPremises:\nJapanese(japaneseGameCompany) ∧ Game(legendOfZelda) ∧ Create(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Game(x) ∧ Top10(x) → Japanese(x)) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x (Game(x) ∧ Sell(x, y) → Top10(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSell(legendOfZelda, million) ::: The Legend of Zelda sold more than one million copies.\nConclusion:\n¬Top10(legendOfZelda) ::: The Legend of Zelda is not in the Top 10 list.\n------\nProblem:"
    ]
  },
  {
    "id": "FOLIO_dev_15",
    "context": "All squares have four sides. All four-sided things are shapes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All squares are shapes.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nSquare(x) ::: x is a square.\nFourSided(x) ::: x is four-sided.\nShape(x) ::: x is a shape.\nPremises:\n∀x (Square(x) → FourSided(x)) ::: All squares have four sides.\n∀x (FourSided(x) → Shape(x)) ::: All four-sided things are shapes.\nConclusion:\n∀x (Square(x) → Shape(x)) ::: All squares are shapes.\n------\nProblem:\nAll squares have four sides. All four-sided things are shapes.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All squares are shapes.\n###\nPredicates:\nSquare(x) ::: x is a square.\nFourSided(x) ::: x is four-sided.\nShape(x) ::: x is a shape.\nPremises:\n∀x (Square(x) → FourSided(x)) ::: All squares have four sides.\n∀x (FourSided(x) → Shape(x)) ::: All four-sided"
    ]
  },
  {
    "id": "FOLIO_dev_20",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is cute and still, then Rock is a turtle and skittish.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCute(x) ::: x is cute.\nExist(x) ::: x exists.\nAnimal(x) ::: x is an animal.\nRabbit(x) ::: x is a rabbit.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\nPremises:\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x (Exist(x) ∧ Squirrel(x)) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\n∀x (Still(x) → ¬Cute(x)) ::: Rock is still.\nConclusion:\n(Cute(rock) ∧ Still(rock)) → (Exist(rock) ∧ Skittish(rock)) ::: If Rock is cute and still, then Rock is a turtle and skittish.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_21",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Stranger Things\" to Lisa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPopular(x) ::: x is a popular Netflix show.\nNetflixShow(x) ::: x is a Netflix show.\nBingeWatch(x) ::: x binge-watches a Netflix show.\nDownload(x) ::: x downloads a Netflix show.\nShare(x, y) ::: x shares a Netflix show to y.\nPremises:\nPopular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n∀x (BingeWatch(karen, x) → Download(karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(karen, blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\n∀x (BingeWatch(karen, x) → Share(karen, lisa)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nConclusion:\nShare(karen, strangerThings) ::: Karen will share \"Stranger Things\" to Lisa.\n------\nProblem:\nA person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university. A"
    ]
  },
  {
    "id": "FOLIO_dev_22",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? \"Black Mirror\" is popular.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPopular(x) ::: x is a popular Netflix show.\nNetflixShow(x) ::: x is a Netflix show.\nBingeWatch(x) ::: x binge-watches a Netflix show.\nDownload(x) ::: x downloads a Netflix show.\nShare(x, y) ::: x shares a Netflix show to y.\nPremises:\nNetflixShow(strangerThings) ∧ Popular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n∀x (BingeWatch(karen, x) → Download(karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(karen, blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\n∀x (BingeWatch(karen, x) → Share(karen, lisa)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nConclusion:\nPopular(blackMirror) ::: \"Black Mirror\" is popular.\n------\nProblem:\nA person is a student if and only if they are enrolled in a university. A person is a student if and only if they are"
    ]
  },
  {
    "id": "FOLIO_dev_23",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Black Mirror\" to Lisa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPopular(x) ::: x is a popular Netflix show.\nNetflixShow(x) ::: x is a Netflix show.\nBingeWatch(x) ::: x binge-watches a Netflix show.\nDownload(x) ::: x downloads a Netflix show.\nShare(x, y) ::: x shares a Netflix show to y.\nPremises:\nNetflixShow(strangerThings) ∧ Popular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n∀x (BingeWatch(karen, x) → Download(karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(karen, blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\n∀x (BingeWatch(karen, x) → Share(karen, lisa)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nConclusion:\nShare(karen, lisa) ::: Karen will share \"Black Mirror\" to Lisa.\n------\nProblem:\nA person is a student if and only if he or she is enrolled in a university. A person is a student"
    ]
  },
  {
    "id": "FOLIO_dev_24",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCapital(x) ::: x is the capital of a country.\nPopulous(x) ::: x is the most populous city in a country.\nLocated(x, y) ::: x is located in y.\nHost(x, y) ::: x hosted y.\nUniversity(x) ::: x is a university.\nRank(x, y) ::: x consistently ranks among the best in y.\nPremises:\nCapital(beijing) ::: Beijing is the capital of the People's Republic of China.\nPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocated(beijing, northernChina) ::: Beijing is located in Northern China.\nHost(beijing, summerOlympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n∃x (University(x) ∧ Rank(x, asiaPacific)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nConclusion:\nHost(beijing, winterOlympics2008) ::: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\n------\nProblem:\nThe 2008 Summer Olympics and 2008 Summer Paralympics Games were held in Beijing, China. The 2008 Summer Olympics and 2008 Summer Paral"
    ]
  },
  {
    "id": "FOLIO_dev_26",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is the second largest Chinese city by urban population.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCapital(x) ::: x is the capital of a country.\nPopulous(x) ::: x is the most populous city in a country.\nLocated(x, y) ::: x is located in y.\nHost(x, y) ::: x hosted y.\nUniversity(x) ::: x is a university.\nRank(x, y) ::: x consistently ranks among the best in y.\nPremises:\nCapital(beijing) ::: Beijing is the capital of the People's Republic of China.\nPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocated(beijing, northernChina) ::: Beijing is located in Northern China.\nHost(beijing, summerOlympics) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n∃x (University(x) ∧ Rank(x, asiaPacific)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nConclusion:\nPopulous(beijing) ∧ ¬Populous(beijing) ::: Beijing is the second largest Chinese city by urban population.\n------\nProblem:\nThe 2018 FIFA World Cup was the 21st FIFA World Cup, an international football tournament contested by the men's national teams of the member associations of FIFA once every four years. It took place in Russia from 14"
    ]
  },
  {
    "id": "FOLIO_dev_27",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is an alien.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAlien(x) ::: x is an alien.\nExtraterrestrial(x) ::: x is an extraterrestrial.\nHuman(x) ::: x is a human.\nFrom(x, y) ::: x is from y.\nPremises:\n∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (From(x, mars) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (From(x, earth) → Human(x)) ::: Everyone from Earth is a human.\nFrom(marvin, earth) ⊕ From(marvin, mars) ::: Marvin cannot be from Earth and from Mars.\n¬From(marvin, earth) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nConclusion:\nAlien(marvin) ::: Marvin is an alien.\n------\nProblem:\nAll people who are not students are either teachers or professors. All teachers are either professors or lecturers. All professors are either lecturers or researchers. All researchers are either professors or lecturers. All lecturers are either professors or researchers. All people who are not students are either teachers or professors."
    ]
  },
  {
    "id": "FOLIO_dev_28",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is neither a human nor from Mars.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAlien(x) ::: x is an alien.\nExtraterrestrial(x) ::: x is an extraterrestrial.\nHuman(x) ::: x is a human.\nFrom(x, y) ::: x is from y.\nPremises:\n∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (From(x, mars) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (From(x, earth) → Human(x)) ::: Everyone from Earth is a human.\nFrom(marvin, earth) ⊕ From(marvin, mars) ::: Marvin cannot be from Earth and from Mars.\n¬From(marvin, earth) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nConclusion:\n¬(Human(marvin) ∧ From(marvin, mars)) ::: Marvin is neither a human nor from Mars.\n------\nProblem:\nAll people who are not from Earth are aliens. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Mar"
    ]
  },
  {
    "id": "FOLIO_dev_29",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Marvin is not from Mars, then Marvin is a human.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAlien(x) ::: x is an alien.\nExtraterrestrial(x) ::: x is an extraterrestrial.\nHuman(x) ::: x is a human.\nFrom(x, y) ::: x is from y.\nPremises:\n∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (From(x, mars) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (From(x, earth) → Human(x)) ::: Everyone from Earth is a human.\nFrom(marvin, earth) ⊕ From(marvin, mars) ::: Marvin cannot be from Earth and from Mars.\n¬From(marvin, earth) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nConclusion:\n¬From(marvin, mars) → Human(marvin) ::: If Marvin is not from Mars, then Marvin is a human.\n------\nProblem:\nAll people who are not from Earth are aliens. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Mar"
    ]
  },
  {
    "id": "FOLIO_dev_33",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads a professional wrestling stable.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLead(x, y) ::: x leads y.\nProfessionalWrestlingStable(x) ::: x is a professional wrestling stable.\nCreedBrothers(x) ::: x is the Creed Brothers.\nIvyNile(x) ::: x is Ivy Nile.\nFeud(x, y) ::: x has a feud with y.\nPremises:\nLead(roderick, diamondMine) ∧ ProfessionalWrestlingStable(diamondMine) ∧ CreedBrothers(diamondMine) ∧ IvyNile(diamondMine) ::: Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\nConclusion:\nLead(roderick, diamondMine) ::: Roderick strong leads a professional wrestling stable.\n------\nProblem:\nThe 2022 FIFA World Cup is the 22nd FIFA World Cup, the quadrennial international men's football championship contested by the national teams of the member associations of FIFA. The tournament is being held in Qatar from 20 November to 18 December 2022. The 2022 FIFA World Cup is the first World Cup to be held in the Arab world and the first to be held in a majority-Muslim country.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The 2022 FIFA World Cup is the first World Cup to be held in the Arab world.\nBased on the above information, is the following statement true, false, or uncertain? The 2022 FIFA World Cup is the first World Cup to be held in a majority-Muslim country.\n###"
    ]
  },
  {
    "id": "FOLIO_dev_34",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads the Creed Brothers.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLead(x, y) ::: x leads y.\nInclude(x, y) ::: x includes y.\nFeud(x, y) ::: x has a feud with y.\nProfessionalWrestlingStable(x) ::: x is a professional wrestling stable.\nCreedBrothers(x) ::: x is the Creed Brothers.\nIvyNile(x) ::: x is Ivy Nile.\nRoderickStrong(x) ::: x is Roderick Strong.\nPremises:\nProfessionalWrestlingStable(diamondMine) ∧ Lead(roderickStrong, diamondMine) ∧ Include(diamondMine, creedBrothers) ∧ Include(diamondMine, ivyNile) ::: Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\nConclusion:\nLead(roderickStrong, creedBrothers) ::: Roderick strong leads the Creed Brothers.\n------\nProblem:\nThe 2022 FIFA World Cup is the 22nd FIFA World Cup, the quadrennial international men's football championship contested by the national teams of the member associations of FIFA. The tournament is being held in Qatar from 20 November to 18 December 2022. The 2022 FIFA World Cup is the first World Cup to be held in the Arab world and the Middle East, and the second World Cup to be held entirely in Asia after the 2002 tournament in South Korea and Japan.\nQuestion:\nBased on the above information, is the following statement true"
    ]
  },
  {
    "id": "FOLIO_dev_36",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is a composer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nComposer(x) ::: x is a composer.\nMusicPiece(x) ::: x is a music piece.\nWrite(x, y) ::: x writes y.\nPremiere(x, y) ::: x premieres y.\nOrchestra(x) ::: x is an orchestra.\nLead(x, y) ::: x leads y.\nConductor(x) ::: x is a conductor.\nPremises:\nMusicPiece(symphonyNo9) ∧ Composer(beethoven) ∧ Write(beethoven, symphonyNo9) ::: Symphony No. 9 is a music piece.\nComposer(beethoven) ∧ Write(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nMusicPiece(symphonyNo9) ∧ Orchestra(viennaMusicSociety) ∧ Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\nOrchestra(viennaMusicSociety) ∧ Lead(beethoven, viennaMusicSociety) ::: Vienna Music Society is an orchestra.\nLead(beethoven, viennaMusicSociety) ∧ Conductor(beethoven) ::: Beethoven leads the Vienna Music Society.\nConclusion:\nComposer(beethoven) ::: Beethoven is a composer.\n------\nProblem:\nA person is a student if and only if the person is enrolled in a university. A person is enrolled in a university if and only if the person is enrolled in a course. A person is enrolled in a course if and only if the person is enrolled in a class. A person is enrolled in a class if and only"
    ]
  },
  {
    "id": "FOLIO_dev_38",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is not a conductor.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nComposer(x) ::: x is a composer.\nMusicPiece(x) ::: x is a music piece.\nWrite(x, y) ::: x writes y.\nPremiere(x, y) ::: x premieres y.\nOrchestra(x) ::: x is an orchestra.\nLead(x, y) ::: x leads y.\nConductor(x) ::: x is a conductor.\nPremises:\nMusicPiece(symphonyNo9) ∧ Composer(beethoven) ∧ Write(beethoven, symphonyNo9) ::: Symphony No. 9 is a music piece.\nComposer(beethoven) ∧ Write(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nMusicPiece(symphonyNo9) ∧ Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\nOrchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\nLead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\nConductor(x) ⊕ ¬Lead(x, y) ::: Orchestras are led by conductors.\nConclusion:\n¬Conductor(beethoven) ::: Beethoven is not a conductor.\n------\nProblem:\nA person is a student if and only if the person is enrolled in a university. A person is enrolled in a university if and only if the person is enrolled in a course. A person is enrolled in a course if and only if the person is enrolled in a class. A person is enrolled in a class if and only if the person is enrolled in a section."
    ]
  },
  {
    "id": "FOLIO_dev_45",
    "context": "All cats are mammals. Some pets are not mammals.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No pets are cats.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCat(x) ::: x is a cat.\nMammal(x) ::: x is a mammal.\nPet(x) ::: x is a pet.\nPremises:\n∀x (Cat(x) → Mammal(x)) ::: All cats are mammals.\n∃x (Pet(x) ∧ ¬Mammal(x)) ::: Some pets are not mammals.\nConclusion:\n¬∃x (Pet(x) ∧ Cat(x)) ::: No pets are cats.\n------\nProblem:\nAll cats are mammals. Some pets are not mammals.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All pets are cats.\n###\nPredicates:\nCat(x) ::: x is a cat.\nMammal(x) ::: x is a mammal.\nPet(x) ::: x is a pet.\nPremises:\n∀x (Cat(x) → Mammal(x)) ::: All cats are mammals.\n∃x (Pet(x) ∧ ¬Mammal(x)) ::: Some pets are not mammals.\nConclusion:\n∀x (Pet(x) → Cat(x)) ::: All pets are cats.\n------\nProblem:\nAll cats are mammals. Some pets are not mammals.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some pets are not cats.\n###\nPred"
    ]
  },
  {
    "id": "FOLIO_dev_50",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is a streaming service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDigital(x) ::: x is a digital media.\nAnalog(x) ::: x is an analog.\nStreamingService(x) ::: x is a streaming service.\nPrintedText(x) ::: x is a printed text.\nHardcoverBook(x) ::: x is a hardcover book.\nPremises:\n∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\nHardcoverBook(1984) → PrintedText(1984) ::: If 1984 is a hardcover book then it is printed text.\n1984(streamingService) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nConclusion:\nStreamingService(1984) ::: 1984 is a streaming service.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_51",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is not a streaming service.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDigital(x) ::: x is digital.\nAnalog(x) ::: x is analog.\nStreamingService(x) ::: x is a streaming service.\nHardcoverBook(x) ::: x is a hardcover book.\nPrintedText(x) ::: x is a printed text.\nPremises:\n∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\nHardcoverBook(1984) → PrintedText(1984) ::: If 1984 is a hardcover book then it is printed text.\n1984(streamingService) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nConclusion:\n¬StreamingService(1984) ::: 1984 is not a streaming service.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_55",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a soccer player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStriker(x) ::: x is a striker.\nSoccerPlayer(x) ::: x is a soccer player.\nLeft(x, y) ::: x left team y.\nPremises:\nStriker(robert) ∧ SoccerPlayer(robert) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robert, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x (Left(x, y) → ¬PlayFor(x, y)) ::: If a player left a team they no longer play for that team.\nConclusion:\nSoccerPlayer(robert) ::: Robert Lewandowski is a soccer player.\n------\nProblem:\nA person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university"
    ]
  },
  {
    "id": "FOLIO_dev_56",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStriker(x) ::: x is a striker.\nSoccerPlayer(x) ::: x is a soccer player.\nLeft(x, y) ::: x left team y.\nPlayFor(x, y) ::: x plays for team y.\nPremises:\nStriker(robert) ∧ SoccerPlayer(robert) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robert, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y (Left(x, y) → ¬PlayFor(x, y)) ::: If a player left a team they no longer play for that team.\nConclusion:\nPlayFor(robert, bayernMunchen) ::: Robert Lewandowski plays for Bayern Munchen.\n------\nProblem:\nA person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university. A person is a student if"
    ]
  },
  {
    "id": "FOLIO_dev_57",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a star.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStriker(x) ::: x is a striker.\nSoccerPlayer(x) ::: x is a soccer player.\nStar(x) ::: x is a star.\nLeft(x, y) ::: x left team y.\nPremises:\nStriker(robert) ∧ SoccerPlayer(robert) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robert, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x (Left(x, y) → ¬PlayFor(x, y)) ::: If a player left a team they no longer play for that team.\nConclusion:\nStar(robert) ::: Robert Lewandowski is a star.\n------\nProblem:\nA person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university. A person is a student if and only if they are enrolled in a university. A person is a student if and only"
    ]
  },
  {
    "id": "FOLIO_dev_60",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Montana is home to the city of Missoula.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCity(x) ::: x is a city.\nState(x) ::: x is a state.\nHome(x, y) ::: x is home to y.\nIncludes(x, y) ::: x includes y.\nSameState(x, y) ::: x and y are in the same state.\nPremises:\nCity(billings) ∧ City(butte) ∧ City(helena) ∧ City(missoula) ::: Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula.\nCity(whiteSulphurSprings) ∧ City(butte) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.\nCity(pierre) ∧ ¬(City(pierre) ∧ State(montana)) ::: The city of Pierre is not in Montana.\n∀x (City(x) ∧ Includes(butte, x) → ¬(City(x) ∧ Includes(pierre, x))) ::: Any city in Butte is not in Pierre.\nConclusion:\nHome(montana, missoula) ::: Montana is home to the city of Missoula.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_61",
    "context": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mike has an F1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nInternationalStudent(x) ::: x is an international student.\nUS(x) ::: x is in US.\nF1(x) ::: x has an F1 visa.\nJ1(x) ::: x has a J1 visa.\nCPT(x) ::: x needs to apply for CPT.\nOPT(x) ::: x needs to apply for OPT.\nPremises:\n∀x (InternationalStudent(x) ∧ US(x) → (F1(x) ∨ J1(x))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x (InternationalStudent(x) ∧ US(x) ∧ F1(x) → (CPT(x) ∨ OPT(x))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nInternationalStudent(mike) ∧ US(mike) ∧ CPT(mike) ::: Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.\nConclusion:\nF1(mike) ::: Mike has an F1 visa.\n------\nProblem:\nA person is a student if the person is a high school student or a college student. A person is a"
    ]
  },
  {
    "id": "FOLIO_dev_62",
    "context": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mike has a J1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nInternationalStudent(x) ::: x is an international student.\nUS(x) ::: x is in US.\nF1Visa(x) ::: x has an F1 visa.\nJ1Visa(x) ::: x has a J1 visa.\nCPT(x) ::: x needs to apply for CPT.\nOPT(x) ::: x needs to apply for OPT.\nPremises:\n∀x (InternationalStudent(x) ∧ US(x) → (F1Visa(x) ∨ J1Visa(x))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x (InternationalStudent(x) ∧ US(x) ∧ F1Visa(x) → (CPT(x) ∨ OPT(x))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nInternationalStudent(mike) ∧ US(mike) ∧ CPT(mike) ::: Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.\nConclusion:\nJ1Visa(mike) ::: Mike has a J1 visa.\n------\nProblem:\nA person is a student if the person is a"
    ]
  },
  {
    "id": "FOLIO_dev_63",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ted is a pet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCow(x) ::: x is a cow.\nPet(x) ::: x is a pet.\nBovine(x) ::: x is a bovine.\nDomesticated(x) ::: x is domesticated.\nAlligator(x) ::: x is an alligator.\nPremises:\n∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.\n∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.\n∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.\nAlligator(ted) ::: Ted is an aligator.\nConclusion:\nPet(ted) ::: Ted is a pet.\n------\nProblem:\nAll people who are not students are either teachers or professors. Some people are teachers. Some people are professors. Some people are students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some people are not students.\n###\nPredicates:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a"
    ]
  },
  {
    "id": "FOLIO_dev_64",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ted is a pet and a cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCow(x) ::: x is a cow.\nPet(x) ::: x is a pet.\nBovine(x) ::: x is a bovine.\nDomesticated(x) ::: x is domesticated.\nAlligator(x) ::: x is an alligator.\nPremises:\n∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.\n∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.\n∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.\nAlligator(ted) ::: Ted is an aligator.\nConclusion:\nPet(ted) ∧ Cow(ted) ::: Ted is a pet and a cow.\n------\nProblem:\nAll people who regularly drink coffee are dependent on caffeine. People either regularly drink coffee or joke about being addicted to caffeine. No one who jokes about being addicted to caffeine is unaware that caffeine is a drug. Rina is either a student and unaware that caffeine is a drug, or neither a student nor un"
    ]
  },
  {
    "id": "FOLIO_dev_65",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Ted is a cow, then Ted is not a pet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCow(x) ::: x is a cow.\nPet(x) ::: x is a pet.\nBovine(x) ::: x is a bovine.\nDomesticated(x) ::: x is domesticated.\nAlligator(x) ::: x is an alligator.\nPremises:\n∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.\n∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.\n∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.\nAlligator(ted) ::: Ted is an aligator.\nConclusion:\n¬(Cow(ted) → ¬Pet(ted)) ::: If Ted is a cow, then Ted is not a pet.\n------\nProblem:\nAll people who are not students are either teachers or professors. Some people are teachers. Some people are professors. Some people are students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? If someone is a student, then that person is not a professor.\n###\nPred"
    ]
  },
  {
    "id": "FOLIO_dev_69",
    "context": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStar(x, y) ::: x stars in y.\nSeries(x) ::: x is a series.\nScriptEditor(x, y) ::: x is the script editor of y.\nWorkingTitle(x, y) ::: x is the working title of y.\nPilot(x, y) ::: x pilots in year y.\nBBCThree(x) ::: x is a series on BBC Three.\nPappy(x) ::: x is a member of Pappy's.\nPremises:\nStar(badults, pappy) ∧ Star(pappy, badults) ::: Badults is a British Sitcom series, starring members of Pappy's.\nSeries(badults) ::: Badults is a series.\nScriptEditor(andrew, badults) ::: Andrew Collins was the script editor for Badults.\nWorkingTitle(secretDudeSociety, badults) ::: The Working title \"The Secret Dude Society\" was used for Badults.\nPilot(badults, year2013) ∧ Pilot(badults, bbcThree) ::: Badults piloted in July 2013 on BBC Three.\nConclusion:\nScriptEditor(andrew, secretDudeSociety) ::: Andrew Collins was the script editor for a series with the working"
    ]
  },
  {
    "id": "FOLIO_dev_71",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KO is a company stock.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGrowthCompany(x) ::: x is a growth company.\nVolatile(x) ::: x is volatile.\nStock(x) ::: x is a stock.\nCompany(x) ::: x is a company.\nMatureCompany(x) ::: x is a mature company.\nRetirementFund(x) ::: x is a retirement fund.\nPremises:\n∀x (GrowthCompany(x) → Stock(x)) ::: All growth companies’ stocks are volatile.\n∀x (Volatile(x) → ¬RetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x (Stock(x) ∧ GrowthCompany(x)) ::: Some companies’ stocks are growth companies’ stocks.\n∀x (MatureCompany(x) → RetirementFund(x)) ::: All mature companies’ stocks are suitable for a retirement fund.\nCompany(ko) ::: KO is a company.\nConclusion:\nStock(ko) ::: KO is a company stock.\n------\nProblem:\nAll people who are not students are either working or retired. All people who are not working are either students or retired. All people who are not retired are either working or students. All people who are not working are either retired or students. All people who are not retired are either working or students. All people who are not working are either retired or students. All people who are not retired are either working or students."
    ]
  },
  {
    "id": "FOLIO_dev_72",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KO is a company stock and a growth company’s stock.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGrowthCompany(x) ::: x is a growth company.\nStock(x) ::: x is a stock.\nVolatile(x) ::: x is volatile.\nCompany(x) ::: x is a company.\nMature(x) ::: x is a mature company.\nRetirementFund(x) ::: x is a retirement fund.\nPremises:\n∀x (Stock(x) → Volatile(x)) ::: All growth companies’ stocks are volatile.\n∀x (Volatile(x) → ¬RetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x (Stock(x) ∧ GrowthCompany(x)) ::: Some companies’ stocks are growth companies’ stocks.\n∀x (Mature(x) → RetirementFund(x)) ::: All mature companies’ stocks are suitable for a retirement fund.\nCompany(ko) ::: KO is a company.\nConclusion:\nStock(ko) ∧ GrowthCompany(ko) ::: KO is a company stock and a growth company’s stock.\n------\nProblem:\nAll people who are not students are either working or retired. All people who are not working are either students or retired. All people who are not retired are either working or students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All people are either working or retired.\n###\nPredicates"
    ]
  },
  {
    "id": "FOLIO_dev_73",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGrowthCompany(x) ::: x is a growth company.\nVolatile(x) ::: x is volatile.\nStock(x) ::: x is a stock.\nCompany(x) ::: x is a company.\nPrice(x) ::: x is a price.\nRetirementFund(x) ::: x is a retirement fund.\nPremises:\n∀x (GrowthCompany(x) → Stock(x)) ::: All growth companies’ stocks are volatile.\n∀x (Volatile(x) → ¬RetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x (Stock(x) ∧ GrowthCompany(x)) ::: Some companies’ stocks are growth companies’ stocks.\n∀x (Stock(x) → Company(x)) ::: All mature companies’ stocks are suitable for a retirement fund.\n∃x (Company(x) ∧ Stock(x)) ::: KO is a mature company’s stock.\nConclusion:\n(GrowthCompany(ko) ∨ Volatile(ko)) → ¬(Stock(ko) ∨ Volatile(ko)) ::: If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.\n------\nProblem:\nAll people who are not vegetarians eat meat. All people who eat meat are carn"
    ]
  },
  {
    "id": "FOLIO_dev_74",
    "context": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joe's license plate begins with the number 34.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nVehicleRegistrationPlate(x) ::: x is a vehicle registration plate.\nFrom(x, y) ::: x is from y.\nBeginWith(x, y) ::: x begins with y.\nPremises:\n∀x (VehicleRegistrationPlate(x) → (From(x, istanbul) ∨ ¬From(x, istanbul))) ::: All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul.\nVehicleRegistrationPlate(joe) ∧ From(joe, istanbul) ::: Joe's vehicle registration plate is from Istanbul.\nVehicleRegistrationPlate(tom) ∧ BeginWith(tom, 35) ::: Tom's license plate begins with the number 35.\n∀x (BeginWith(x, 35) → ¬BeginWith(x, 34)) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nConclusion:\nBeginWith(joe, 34) ::: Joe's license plate begins with the number 34.\n------\nProblem:\nAll people who are not from the United States are from Canada. All people who are from Canada are from the United States. All people who are from the United States are from Canada.\nQuestion:\nBased on the above information, is the following statement true, false, or"
    ]
  },
  {
    "id": "FOLIO_dev_75",
    "context": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom's license plate is from Istanbul.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFrom(x, y) ::: x is from y.\nBeginWith(x, y) ::: x begins with y.\nPremises:\n∀x (From(x, istanbul) → BeginWith(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x (¬BeginWith(x, 34) → ¬From(x, istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\nFrom(joe, istanbul) ::: Joe's vehicle registration plate is from Istanbul.\nBeginWith(tom, 35) ::: Tom's license plate begins with the number 35.\nConclusion:\nFrom(tom, istanbul) ::: Tom's license plate is from Istanbul.\n------\nProblem:\nAll people who are not from the United States are from Canada. All people who are from Canada are from the United States. All people who are from the United States are from Canada.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All people are from the United States.\n###\nPredicates:\nFrom(x, y) ::: x is from y.\nPremises:\n∀x (¬From(x, unitedStates) → From(x, canada)) ::: All people who are not from the United States are from Canada.\n∀x (From(x, canada)"
    ]
  },
  {
    "id": "FOLIO_dev_79",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are a product of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x) ::: x is spicy.\nProduct(x, y) ::: x is a product of y.\nPremises:\n¬∃x (Bakery(x) ∧ Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(bakedByMelissa, x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n∃x (Spicy(x) ∨ Bakery(x)) → (Spicy(x) ∨ Hotpot(x)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nConclusion:\nProduct(bakedByMelissa, driedThaiChilies) ::: Dried Thai chilies are a product of Baked by Melissa.\n------\nProblem:\nAll people who are not students are either teachers or professors. All professors are teachers. All teachers"
    ]
  },
  {
    "id": "FOLIO_dev_100",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is kind or a CEO.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\nPremises:\n∀x (Kind(x) ∨ Evil(x)) ::: A man is either kind or evil.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\nGentleman(harry) ::: Harry is a gentleman.\nConclusion:\nKind(harry) ∨ CEO(harry) ::: Harry is kind or a CEO.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_106",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? It cost below US $300 to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCost(x, y) ::: x costs y.\nGRETest(x) ::: x is the GRE test.\nETS(x) ::: x is ETS.\nFinancialAid(x, y) ::: x provides financial aid to y.\nEconomicHardship(x) ::: x refers to difficulty caused by having too little money or too few resources.\nSingleParentFamily(x) ::: x lives in a single-parent family.\nOutOfWork(x) ::: x has been out of work for more than a year.\nPremises:\nCost(GRETest, 205) ::: It costs US $205 to take the GRE test.\nFinancialAid(ETS, GREApplicant) ∧ EconomicHardship(GREApplicant) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nSingleParentFamily(tom) ∧ OutOfWork(tom) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year.\nConclusion:\nCost(GRETest, 300)"
    ]
  },
  {
    "id": "FOLIO_dev_111",
    "context": "All fir trees are evergreens. Some objects of worship are fir trees.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some evergreens are not objects of worship.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFirTree(x) ::: x is a fir tree.\nEvergreen(x) ::: x is an evergreen.\nObjectOfWorship(x) ::: x is an object of worship.\nPremises:\n∀x (FirTree(x) → Evergreen(x)) ::: All fir trees are evergreens.\n∃x (Evergreen(x) ∧ ObjectOfWorship(x)) ::: Some objects of worship are fir trees.\nConclusion:\n∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x)) ::: Some evergreens are not objects of worship.\n------\nProblem:\nAll people who are not students are either teachers or parents. Some people who are not students are teachers.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some people who are not students are parents.\n###\nPredicates:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\nParent(x) ::: x is a parent.\nPremises:\n∀x (¬Student(x) → (Teacher(x) ∨ Parent(x))) ::: All people who are not students are either teachers or parents.\n∃x (¬Student(x) ∧ Teacher(x)) ::: Some people who are not students are teachers.\nConclusion:\n∃x (¬Student(x) ∧ Parent(x)) ::: Some people who are not students are parents.\n------\nProblem:\nAll people who are not students are either teachers or parents. Some people who are not students are teachers.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some people who are not students are parents.\n###\nPredicates:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\nParent(x) ::: x is a parent.\nPremises:\n∀x (¬Student(x) → (Teacher(x) ∨ Parent(x))) ::: All people who are not students are either teachers or parents.\n∃x (¬Student(x) ∧ Teacher(x)) ::: Some people who are not students are teachers.\nConclusion:\n∃x (¬Student(x) ∧ Parent(x)) ::: Some people who are not students are parents.\n------\nProblem:\nAll people who are not students are either teachers or parents. Some people who are not students"
    ]
  },
  {
    "id": "FOLIO_dev_118",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Barutin is named after all islands in Antarctica.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNamedAfter(x, y) ::: x is named after y.\nLocatedIn(x, y) ::: x is located in y.\nIsland(x) ::: x is an island.\nAntarctica(x) ::: x is in Antarctica.\nPremises:\nNamedAfter(barutinCove, barutin) ∧ LocatedIn(barutinCove, snowIsland) ∧ LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(southShetlandIslands, antarctica) ::: Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica.\nConclusion:\nNamedAfter(barutin, antarctica) ::: Barutin is named after all islands in Antarctica.\n------\nProblem:\nThe 1992 Summer Olympics were held in Barcelona, Spain. The 1996 Summer Olympics were held in Atlanta, Georgia. The 2000 Summer Olympics were held in Sydney, Australia. The 2004 Summer Olympics were held in Athens, Greece. The 2008 Summer Olympics were held in Beijing, China. The 2012 Summer Olympics were held in London, England. The 2016 Summer Olympics were held in Rio de Janeiro, Brazil. The 2020 Summer Olympics were held in Tokyo, Japan. The 2024 Summer Olympics will be held in Paris, France. The 2028 Summer Olympics will be held in Los Angeles, California.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The 2024 Summer Olympics will be held in Tokyo, Japan.\n###\nPredicates:\nSummerOlympics(x) ::: x is a Summer Olympics.\nHeldIn(x, y) ::: x is held in y.\nCity(x) ::: x is a city.\nPremises:\nSummerOlympics(1992SummerOlympics) ∧ HeldIn(1992SummerOlympics, barcelona) ::: The 1992 Summer Olympics were held in Barcelona, Spain.\nSummerOlympics(1996SummerOlympics) ∧ HeldIn(1996SummerOlympics, atlanta) ::: The 1996 Summer"
    ]
  },
  {
    "id": "FOLIO_dev_119",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNamedAfter(x, y) ::: x is named after y.\nLocatedIn(x, y) ::: x is located in y.\nCove(x) ::: x is a cove.\nBulgaria(x) ::: x is a place in Bulgaria.\nAntarctica(x) ::: x is a place in Antarctica.\nSouthShetlandIslands(x) ::: x is a place in the South Shetland Islands.\nSnowIsland(x) ::: x is a place in Snow Island.\nGreenwichIsland(x) ::: x is a place in Greenwich Island.\nDeceptionIsland(x) ::: x is a place in Deception Island.\nPremises:\nNamedAfter(barutinCove, barutin) ∧ LocatedIn(barutinCove, snowIsland) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nLocatedIn(snowIsland, southShetlandIslands) ::: Barutin Cove is on the southwest coast of Snow Island.\n∀x (LocatedIn(x, southShetlandIslands) → LocatedIn(x, antarctica)) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\n∀x (LocatedIn(x, antarctica) → LocatedIn(x, antarctica)) ::: The South Shetland Islands are considered part of Antarctica.\nConclusion:\n∃x (NamedAfter(x, bulgaria) ∧ Cove(x)) ::: There is at least one cove in Antarctica named after a place in Bulgaria.\n------\nProblem:\nThe 1992 Summer Olympics were held in Barcelona, Spain. The 1992 Summer Olympics were the first Summer Olympics to be held in Spain. The 1992 Summer Olympics were the first Summer Olympics to be held in a country that had never hosted the Summer Olympics. The 1992 Summer Olympics were the first Summer Olympics to be held in a country that had never hosted the Winter Olympics. The 1992 Summer Olympics were the first Summer Olympics to be held in a country that had never hosted the Summer Olympics or the Winter Olympics.\nThe 1992 Summer Olympics were the first Summer Olympics to be held in a country that had never hosted the Summer Olympics or the Winter Olympics.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The 1992 Summer Olympics were the first Summer Olympics to be held in a country that had never hosted the"
    ]
  },
  {
    "id": "FOLIO_dev_120",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Barutin is not located in Antarctica.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLocatedIn(x, y) ::: x is located in y.\nPartOf(x, y) ::: x is part of y.\nPremises:\nLocatedIn(barutinCove, snowIsland) ∧ LocatedIn(snowIsland, southwestCoastOfSnowIsland) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nLocatedIn(southwestCoastOfSnowIsland, southwestCoastOfSnowIsland) ∧ LocatedIn(southwestCoastOfSnowIsland, southwestCoastOfSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\nPartOf(southSheltandIslands, southwestCoastOfSnowIsland) ∧ PartOf(southwestCoastOfSnowIsland, southwestCoastOfSnowIsland) ∧ PartOf(southwestCoastOfSnowIsland, southwestCoastOfSnowIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPartOf(southSheltandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.\nConclusion:\n¬LocatedIn(barutinCove, antarctica) ::: Barutin is not located in Antarctica.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_121",
    "context": "Some affection is love. Some love is positive.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some affection is positive.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAffection(x) ::: x is an affection.\nLove(x) ::: x is love.\nPositive(x) ::: x is positive.\nPremises:\n∃x (Affection(x) ∧ Love(x)) ::: Some affection is love.\n∃x (Love(x) ∧ Positive(x)) ::: Some love is positive.\nConclusion:\n∃x (Affection(x) ∧ Positive(x)) ::: Some affection is positive.\n------\nProblem:\nSome affection is love. Some love is positive.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some affection is positive.\n###\nPredicates:\nAffection(x) ::: x is an affection.\nLove(x) ::: x is love.\nPositive(x) ::: x is positive.\nPremises:\n∃x (Affection(x) ∧ Love(x)) ::: Some affection is love.\n∃x (Love(x) ∧ Positive(x)) ::: Some love is positive.\nConclusion:\n∃x (Affection(x) ∧ Positive(x)) ::: Some affection is positive.\n------\nProblem:\nSome affection is love. Some love is positive.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some affection"
    ]
  },
  {
    "id": "FOLIO_dev_126",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock has wings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMammal(x) ::: x is a mammal.\nMonkey(x) ::: x is a monkey.\nAnimal(x) ::: x is an animal.\nBird(x) ::: x is a bird.\nFly(x) ::: x can fly.\nBreathe(x) ::: x breathes.\nWing(x) ::: x has wings.\nCan(x, y) ::: x can do y.\nPremises:\n∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ∨ Bird(x)) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Can(x, y) → Wing(x)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nConclusion:\nWing(rock) ::: Rock has wings.\n------\nProblem:\nAll mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly"
    ]
  },
  {
    "id": "FOLIO_dev_130",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has at least one child.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nChild(x) ::: x has at least one child.\nTravel(x, y) ::: x travels to y for their honeymoon.\nWedding(x) ::: x has a wedding.\nWellAttended(x) ::: x is well-attended.\nJuly(x) ::: x is a wedding in July.\nPremises:\n∀x (Wedding(x) → Child(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (Travel(x, paris) → Wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (July(x) → Travel(x, paris)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (WellAttended(x) ∧ July(x)) ::: Some weddings in July are well-attended.\n¬(Child(john) → (¬Travel(john, paris) ∧ ¬Wedding(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(WellAttended(john) → (July(john) ∨ (¬July(john) → Travel(john, paris)))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nConclusion:\nChild(john) ::: John has at least one child.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_137",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If something is a household appliance, it sucks.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nSuck(x) ::: x sucks.\nHouseholdAppliance(x) ::: x is a household appliance.\nPlunger(x) ::: x is a plunger.\nVacuum(x) ::: x is a vacuum.\nVampire(x) ::: x is a vampire.\nSpace(x) ::: x is space.\nDuster(x) ::: x is a duster.\nPremises:\nSuck(plunger) ∧ Suck(vacuum) ∧ Suck(vampire) ∧ Space(space) ∧ ¬HouseholdAppliance(duster) ::: Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.\nConclusion:\n∀x (HouseholdAppliance(x) → Suck(x)) ::: If something is a household appliance, it sucks.\n------\nProblem:\nA person who is a student is a person who is enrolled in a school. A person who is a student is a person who is enrolled in a college. A person who is a student is a person who is enrolled in a university. A person who is a student is a person who is enrolled in a high school. A person who is a student is a person who is enrolled in a middle school. A person who is a student is a person who is enrolled in a primary school. A person who is a student is a person who is enrolled in a kindergarten. A person who is a student is a person who is enrolled in a nursery school. A person who is a student is a person who"
    ]
  },
  {
    "id": "FOLIO_dev_150",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Neapolitan Chronicles is an English book.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPublish(x, y) ::: x is published in language y.\nTranslate(x, y) ::: x is translated from language y.\nBook(x) ::: x is a book.\nPremises:\n∀x (Publish(x, english) ∧ Book(x)) ::: All of New Vessel Press's published books are in English.\nNewVesselPress(x) ∧ Publish(x, neapolitanChronicles) ∧ Translate(neapolitanChronicles, italian) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nNewVesselPress(x) ∧ Publish(x, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.\nConclusion:\nPublish(neapolitanChronicles, english) ::: Neapolitan Chronicles is an English book.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_152",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Palace of Flies was translated from Italian.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPublish(x, y) ::: x is published in language y.\nTranslate(x, y) ::: x is translated from language y.\nBook(x) ::: x is a book.\nPremises:\n∀x (Publish(x, english) ∧ Book(x)) ::: All of New Vessel Press's published books are in English.\nNewVesselPress(x) ∧ Publish(x, neapolitanChronicles) ∧ Translate(neapolitanChronicles, italian) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nNewVesselPress(x) ∧ Publish(x, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.\nConclusion:\nTranslate(palaceOfFlies, italian) ::: Palace of Flies was translated from Italian.\n------\nPro"
    ]
  },
  {
    "id": "FOLIO_dev_156",
    "context": "All humans are mortal. All Greeks are humans.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Greeks are mortal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nHuman(x) ::: x is a human.\nGreek(x) ::: x is a Greek.\nMortal(x) ::: x is mortal.\nPremises:\n∀x (Human(x) → Mortal(x)) ::: All humans are mortal.\n∀x (Greek(x) → Human(x)) ::: All Greeks are humans.\nConclusion:\n∃x (Greek(x) ∧ Mortal(x)) ::: Some Greeks are mortal.\n------\nProblem:\nAll humans are mortal. All Greeks are humans.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? Some Greeks are mortal.\n###\nPredicates:\nHuman(x) ::: x is a human.\nGreek(x) ::: x is a Greek.\nMortal(x) ::: x is mortal."
    ]
  },
  {
    "id": "FOLIO_dev_160",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jack takes the database course.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStudent(x) ::: x is a student.\nWork(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nPartTimeJob(x) ::: x is a part-time job.\nOffered(x, y) ::: x is offered by y.\nUniversity(x) ::: x is a university.\nDatabase(x) ::: x is the database course.\nInstructed(x, y) ::: x is instructed by y.\nProfessor(x) ::: x is a professor.\nDavid(x) ::: x is professor David.\nLab(x) ::: x is a lab.\nPremises:\n¬(Student(james) ∧ Work(james, library) ∧ From(james, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) ∧ PartTimeJob(x) ∧ Offered(x, university)) → (Student(x) ∧ Work(x, library)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Student(x) ∧ Take(x, database)) → (Student(x) ∧ From(x, computerScience)) ::: All students who take the database course are from the computer science department.\n∀x (Student(x) ∧ Instructed(x, david)) → (Student(x) ∧ Take(x, database)) ::: All students instructed by professor David are taking the database course.\n∀x (Student(x) ∧ Work(x, lab)) → (Student(x) ∧ Instructed(x, david)) ::: All students working in the lab are instructed by professor David.\nStudent(james) ∧ Work(james, lab) ::: James is a student working in the lab.\n¬(Student(jack) ∧ PartTimeJob(jack) ∧ Offered(jack, university)) ∧ ¬(Student(jack) ∧ Work(jack, lab)) ::: Jack neither has a part-time job offered by the university nor works in the lab.\nConclusion:\nTake(jack, database) ::: Jack takes the database course.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_161",
    "context": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLike(x, y) ::: x likes y.\nWant(x, y) ::: x wants to y.\nHave(x, y) ::: x has y.\nCan(x, y) ::: x can y.\nWill(x, y) ::: x will y.\nPremises:\nLike(george, music) → Want(george, compose) ::: If George likes music, he wants to compose.\nHave(george, program) → Can(george, compose) ::: If George has access to a program, he can compose.\nWant(george, compose) ∧ Can(george, compose) → Will(george, compose) ::: If George can compose and wants to compose, he will compose.\nConclusion:\nHave(george, program) ∧ Like(george, music) → Will(george, compose) ::: If George likes music and has access to a program, he will compose.\n------\nProblem:\nIf a person is a student, then he is a person. If a person is a student, then he is a person. If a person is a student, then he is a person.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? If a person is a student, then he is a person.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPerson(x) ::: x is a person.\nPremises:\nStudent(x) → Person(x) ::: If a person is a student, then he is a person.\nStudent(x) → Person(x) ::: If a person is a student, then he is a person.\nStudent(x) → Person(x) ::: If a person is a student, then he is a person.\nConclusion:\nStudent(x) → Person(x) ::: If a person is a student, then he is a person.\n------\nProblem:\nIf a person is a student, then he is a person. If a person is a student, then he is a person. If a person is a student, then he is a person.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? If a person is a student, then he is a person.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPerson(x) ::: x is a person"
    ]
  },
  {
    "id": "FOLIO_dev_162",
    "context": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If George will not compose, George can not compose.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLike(x, y) ::: x likes y.\nWant(x, y) ::: x wants to y.\nHave(x, y) ::: x has y.\nCan(x, y) ::: x can y.\nWill(x, y) ::: x will y.\nPremises:\nLike(george, music) → Want(george, compose) ::: If George likes music, he wants to compose.\nHave(george, program) → Can(george, compose) ::: If George has access to a program, he can compose.\nCan(george, compose) ∧ Want(george, compose) → Will(george, compose) ::: If George can compose and wants to compose, he will compose.\nConclusion:\n¬Will(george, compose) → ¬Can(george, compose) ::: If George will not compose, George can not compose.\n------\nProblem:\nIf a person is a student, then the person is a student. If a person is a student, then the person is a student. If a person is a student, then the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? If a person is a student, then the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\nStudent(x) → Student(x) ::: If a person is a student, then the person is a student.\nStudent(x) → Student(x) ::: If a person is a student, then the person is a student.\nStudent(x) → Student(x) ::: If a person is a student, then the person is a student.\nConclusion:\nStudent(x) → Student(x) ::: If a person is a student, then the person is a student.\n------\nProblem:\nIf a person is a student, then the person is a student. If a person is a student, then the person is a student. If a person is a student, then the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? If a person is a student, then the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\nStudent(x) → Student(x) ::: If a person is a"
    ]
  },
  {
    "id": "FOLIO_dev_163",
    "context": "A hawk never lands. Some birds are hawks.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All birds land",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLand(x) ::: x lands.\nHawk(x) ::: x is a hawk.\nBird(x) ::: x is a bird.\nPremises:\n∀x (Hawk(x) → ¬Land(x)) ::: A hawk never lands.\n∃x (Bird(x) ∧ Hawk(x)) ::: Some birds are hawks.\nConclusion:\n∀x (Bird(x) → Land(x)) ::: All birds land.\n------\nProblem:\nA person who is a student is a person who is not a teacher. A person who is a teacher is a person who is not a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person who is a student is a person who is not a teacher.\n###\nPredicates:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\nPremises:\n∀x (Student(x) → ¬Teacher(x)) ::: A person who is a student is a person who is not a teacher.\n∀x (Teacher(x) → ¬Student(x)) ::: A person who is a teacher is a person who is not a student.\nConclusion:\n∀x (Student(x) → ¬Teacher(x)) ::: A person who is a student is a person who is not a teacher.\n------\nProblem:\nA person who is a student is a person who is not a teacher. A person who is a teacher is a person who is not a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person who is a student is a person who is not a teacher.\n###\nPredicates:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\nPremises:\n∀x (Student(x) → ¬Teacher(x)) ::: A person who is a student is a person who is not a teacher.\n∀x (Teacher(x) → ¬Student(x)) ::: A person who is a teacher is a person who is not a student.\nConclusion:\n∀x (Student(x) → ¬Teacher(x)) ::: A person who is a student is a person"
    ]
  },
  {
    "id": "FOLIO_dev_164",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMonday(x) ::: x is a Monday.\nAt(x, y) ::: x is at time y.\nRose(x) ::: x is a rose.\nGivenOut(x, y) ::: x is given out on TV show y.\nOn(x, y) ::: x is on TV show y.\nPortrays(x, y) ::: x portrays the lives of y.\nRealityTV(x) ::: x is a reality TV show.\nBreakingBad(x) ::: x is the TV show Breaking Bad.\nPremises:\n∀x (GivenOut(x, y) → On(x, y)) ::: Every rose given out on TV is on the TV show.\n∀x (On(x, y) → Portrays(x, z)) ::: Everything on the TV show portrays the lives of real people.\n∀x (Portrays(x, y) → RealityTV(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTV(BreakingBad) ::: Breaking Bad is not a reality TV show.\nConclusion:\nAt(BreakingBad, Monday8pm) ::: Breaking Bad is on Monday at 8 pm.\n------\nProblem:\nAll people who are not students are either employed or unemployed. All people who are employed are either employed full-time or employed part-time. All people who are employed full-time are employed by a company. All people who are employed by a company are employed by a company in the United States. All people who are employed by a company in the United States are employed by a company in the United States that is not a small business. All people who are employed by a company in the United States that is not a small business are employed by a company in the United States that is not a small business and is not a large business. All people who are employed by a company in the United States that is not a small business and is not a large business are employed by a company in the United States that is not a small business and is not a large business and is not a medium-sized business. All people who are employed by a company in the United States that is not a small business and is not a large business and is not a medium-sized business are employed by a company in the United States that is not a small business and is not a large business and is not a medium-sized business and is not a small business. All people who are employed"
    ]
  },
  {
    "id": "FOLIO_dev_165",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMonday(x) ::: x is a Monday.\nTV(x) ::: x is a TV show.\nRose(x) ::: x is a rose.\nGivenOut(x, y) ::: x is given out on TV show y.\nOn(x, y) ::: x is on TV show y.\nPortray(x, y) ::: x portrays the lives of y.\nReality(x) ::: x is a reality TV show.\nBreakingBad(x) ::: x is the TV show Breaking Bad.\nPremises:\n∀x (GivenOut(x, y) → On(x, y)) ::: Every rose given out on TV is on the TV show.\n∀x (On(x, y) → Portray(x, y)) ::: Everything on the TV show portrays the lives of real people.\n∀x (Portray(x, y) → Reality(y)) ::: All shows portraying the lives of real people are reality TV shows.\n¬Reality(BreakingBad) ::: Breaking Bad is not a reality TV show.\nConclusion:\nGivenOut(rose, BreakingBad) ∧ Monday(8pm) ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n------\nProblem:\nAll people who are not students are either employed or unemployed. All people who are employed are either employed full-time or employed part-time. All people who are employed full-time are employed by a company. All people who are employed by a company are employed by a company in the United States. All people who are employed by a company in the United States are employed by a company in the United States that is not a small business. All people who are employed by a company in the United States that is not a small business are employed by a company in the United States that is not a small business and is not a large business. All people who are employed by a company in the United States that is not a small business and is not a large business are employed by a company in the United States that is not a small business and is not a large business and is not a medium-sized business. All people who are employed by a company in the United States that is not a small business and is not a large business and is not a medium-sized business are employed by a company in the United States that is not a small business and is not a large business and is not a medium-sized business and"
    ]
  },
  {
    "id": "FOLIO_dev_166",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMonday(x) ::: x is a Monday.\nEightPM(x) ::: x is 8 pm.\nRoses(x) ::: x is a rose.\nGivenOut(x, y) ::: x is given out on y.\nTV(x) ::: x is on TV.\nBachelor(x) ::: x is on the Bachelor.\nPortray(x, y) ::: x portrays y.\nRealityTV(x) ::: x is a reality TV show.\nBreakingBad(x) ::: x is Breaking Bad.\nPremises:\n∀x (GivenOut(x, y) → TV(y)) ::: Every rose given out on TV is on the TV.\n∀x (TV(x) → Portray(x, realPeople)) ::: Everything on the TV portrays the lives of real people.\n∀x (Portray(x, realPeople) → RealityTV(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTV(breakingBad) ::: Breaking Bad is not a reality TV show.\nConclusion:\n∀x (GivenOut(x, breakingBad) → Monday(x) ∧ EightPM(x)) ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n------\nProblem:\nAll people who are not students are either employed or unemployed. All people who are employed are either employed full-time or employed part-time. All people who are employed full-time are employed. All people who are employed part-time are employed. All people who are employed are either employed full-time or employed part-time. All people who are employed full-time are employed. All people who are employed part-time are employed. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed full-time or employed part-time. All people who are employed are either employed"
    ]
  },
  {
    "id": "FOLIO_dev_167",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Heinrich Schmidt was either German or Russian.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNazi(x) ::: x is a Nazi.\nGerman(x) ::: x is German.\nRussian(x) ::: x is Russian.\nMember(x, y) ::: x is a member of y.\nPremises:\nNazi(heinrich) ∧ Member(heinrich, prussianStateParliament) ∧ Member(heinrich, naziReichstag) ::: Heinrich Scmidt was a Nazi German politician.\nConclusion:\nGerman(heinrich) ∨ Russian(heinrich) ::: Heinrich Schmidt was either German or Russian.\n------\nProblem:\nA person is a student if and only if the person is a student. A person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\nConclusion:\nStudent(x) ↔ Student(x) ::: A person is a student if and only if the person is a student.\n------\nProblem:\nA person is a student if and only if the person is a student. A person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\nConclusion:\nStudent(x) ↔ Student(x) ::: A person is a student if and only if the person is a student.\n------\nProblem:\nA person is a student if and only if the person is a student. A person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:"
    ]
  },
  {
    "id": "FOLIO_dev_168",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNaziGerman(x) ::: x is a Nazi German.\nPolitician(x) ::: x is a politician.\nMember(x, y) ::: x is a member of y.\nPremises:\nNaziGerman(heinrich) ∧ Politician(heinrich) ∧ Member(heinrich, prussianStateParliament) ∧ Member(heinrich, naziReichstag) ::: Heinrich Scmidt was a Nazi German politician.\nConclusion:\n∃x (NaziGerman(x) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag)) ::: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n------\nProblem:\nA person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\nConclusion:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\n------\nProblem:\nA person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\nConclusion:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\n------\nProblem:\nA person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent"
    ]
  },
  {
    "id": "FOLIO_dev_169",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No politicans are part of the Nazi Reichstag.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNazi(x) ::: x is a Nazi.\nPolitician(x) ::: x is a politician.\nMember(x, y) ::: x is a member of y.\nPremises:\nNazi(heinrich) ∧ Politician(heinrich) ∧ Member(heinrich, prussianStateParliament) ∧ Member(heinrich, naziReichstag) ::: Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nConclusion:\n¬∃x (Politician(x) ∧ Member(x, naziReichstag)) ::: No politicans are part of the Nazi Reichstag.\n------\nProblem:\nA person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\nConclusion:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\n------\nProblem:\nA person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPremises:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\nConclusion:\n∀x (Student(x) ↔ Student(x)) ::: A person is a student if and only if the person is a student.\n------\nProblem:\nA person is a student if and only if the person is a student.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? A person is a student if and only if the person is a student.\n###\nPredicates:\nStudent(x) ::: x is a student.\nPrem"
    ]
  },
  {
    "id": "FOLIO_dev_178",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The United States won the most medals in the last Olympic games.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nOlympicGames(x) ::: x is an Olympic games.\nSportingEvent(x) ::: x is a sporting event.\nLast(x, y) ::: x is the last x.\nWin(x, y) ::: x won y.\nMedal(x) ::: x is a medal.\nMost(x, y) ::: x won the most y.\nPremises:\nOlympicGames(tokyo) ∧ Last(olympicGames, tokyo) ::: The Olympic games is a sporting event.\nOlympicGames(tokyo) ∧ Last(olympicGames, tokyo) ∧ Win(unitedStates, mostMedals) ::: The last Olympic games was in Tokyo.\nWin(unitedStates, mostMedals) ::: The United States won the most medals in Tokyo.\nConclusion:\nWin(unitedStates, mostMedals) ::: The United States won the most medals in the last Olympic games.\n------\nProblem:\n[BG] The United States is a country. The United States is in North America. The United States is in the Western Hemisphere. The United States is in the Northern Hemisphere. The United States is in the Eastern Hemisphere. The United States is in the Southern Hemisphere.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The United States is in the Northern Hemisphere.\n###\nPredicates:\nCountry(x) ::: x is a country.\nNorthAmerica(x) ::: x is in North America.\nWesternHemisphere(x) ::: x is in the Western Hemisphere.\nNorthernHemisphere(x) :::"
    ]
  },
  {
    "id": "FOLIO_dev_179",
    "context": "All horses have hooves. No humans have hooves.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some humans are horses.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nHorse(x) ::: x is a horse.\nHuman(x) ::: x is a human.\nHoof(x) ::: x has hooves.\nPremises:\n∀x (Horse(x) → Hoof(x)) ::: All horses have hooves.\n∀x (Human(x) → ¬Hoof(x)) ::: No humans have hooves.\nConclusion:\n∃x (Human(x) ∧ Horse(x)) ::: Some humans are horses.\n------\nProblem:\nAll dogs are mammals. All mammals are animals.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All dogs are animals.\n###\nPredicates:\nDog(x) ::: x is a dog.\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nPremises:\n∀x (Dog(x) → Mammal(x)) ::: All dogs are mammals.\n∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\nConclusion:\n∀x (Dog(x) → Animal(x)) ::: All dogs are animals.\n------\nProblem:\nAll dogs are mammals. All mammals are animals.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All dogs are animals.\n###\nPredicates:\nDog(x) ::: x is a dog.\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nPremises:\n∀x"
    ]
  },
  {
    "id": "FOLIO_dev_180",
    "context": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Susan flies from LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFlies(x, y) ::: x flies to airport y.\nDeparture(x) ::: x is the departure airport.\nArrival(x) ::: x is the arrival airport.\nPremises:\nFlies(susan, lga) ::: Susan flies to LGA airport.\n∀x ∀y (Flies(x, y) → ¬(Departure(y) ∧ Arrival(y))) ::: The departure and arrival can not be the same airport.\n∃x (Flies(x, lga)) ::: John flies from LGA airport.\nConclusion:\nFlies(susan, lga) ::: Susan flies from LGA airport.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_181",
    "context": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John flies to LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFlies(x, y) ::: x flies to airport y.\nDeparture(x) ::: x is the departure airport.\nArrival(x) ::: x is the arrival airport.\nPremises:\nFlies(susan, lga) ::: Susan flies to LGA airport.\n∀x ∀y (Flies(x, y) → ¬(Departure(y) ∧ Arrival(y))) ::: The departure and arrival can not be the same airport.\n∃x (Flies(x, lga)) ::: John flies from LGA airport.\nConclusion:\nFlies(john, lga) ::: John flies to LGA airport.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_190",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is an American basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAmerican(x) ::: x is an American.\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x, large) → Wear(x, largeSize)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬Wear(yuri, largeSize) ::: Yuri does not wear large-size clothes.\nConclusion:\nAmerican(yuri) ::: Yuri is an American basketball player.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_193",
    "context": "Events are either happy or sad. At least one event is happy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All events are sad.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nHappy(x) ::: x is a happy event.\nSad(x) ::: x is a sad event.\nPremises:\n∀x (Happy(x) ∨ Sad(x)) ::: Events are either happy or sad.\n∃x Happy(x) ::: At least one event is happy.\nConclusion:\n∀x Sad(x) ::: All events are sad.\n------\nProblem:\nAll people who are not students are either teachers or professors. All people who are not professors are teachers.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All people who are not students are professors.\n###\nPredicates:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\nProfessor(x) ::: x is a professor.\nPremises:\n∀x (¬Student(x) → (Teacher(x) ∨ Professor(x))) ::: All people"
    ]
  },
  {
    "id": "FOLIO_dev_200",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva foes not play for a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBorn(x, y) ::: x was born in year y.\nCommonlyKnownAs(x, y) ::: x is commonly known as y.\nLoanedOut(x, y) ::: x is loaned out to y.\nFootballPlayer(x) ::: x is a football player.\nBrazillian(x) ::: x is a Brazillian.\nFootballClub(x) ::: x is a football club.\nPremises:\nBorn(aliton, year1995) ∧ CommonlyKnownAs(aliton, aliton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(aliton) ∧ LoanedOut(aliton, braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(aliton) ∧ Brazillian(aliton) ∧ FootballClub(nautico) ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFootballClub(nautico) ∧ FootballClub(braga) ::: Nautico is a football club along with Braga.\nFootballClub(fluminense) ::: Fluminense is a football club.\nConclusion:\n¬∃x (FootballPlayer(x) ∧ FootballClub(x)) ::: Ailton Silva foes not play for a football club.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_201",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton was not loaned out to a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBorn(x, y) ::: x was born in year y.\nCommonlyKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOut(x, y) ::: x was loaned out to y.\nBrazillian(x) ::: x is a Brazillian footballer.\nFootballClub(x) ::: x is a football club.\nPremises:\nBorn(aliton, year1995) ∧ CommonlyKnownAs(aliton, aliton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(aliton) ∧ LoanedOut(aliton, braga) ::: Ailton is a football player who was loaned out to Braga.\nBrazillian(aliton) ∧ FootballClub(nautico) ∧ FootballClub(braga) ∧ FootballClub(fluminense) ::: Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.\nConclusion:\n¬LoanedOut(aliton, x) ::: Ailton was not loaned out to a football club.\n------\nProblem:\nA person is a student if and only if the person is a student. A person is a student if and only if the person is"
    ]
  },
  {
    "id": "FOLIO_dev_1",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends and is very engaged with school events.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nYoungChild(x) ::: x is a young child.\nTeenager(x) ::: x is a teenager.\nWish(x, y) ::: x wishes to further y.\nPremises:\n∀x (Perform(x) → Attend(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x (Perform(x) ⊕ Inactive(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (Inactive(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∀x (YoungChild(x) ∨ Teenager(x) ∧ Wish(x, AcademicCareer)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Student(bonnie) ∧ Attend(bonnie)) ⊕ ¬(Student(bonnie) ∨ Attend(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nConclusion:\n(Chaperone(bonnie) ∨ ¬(YoungChild(\n------"
    ]
  },
  {
    "id": "FOLIO_dev_2",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends and is very engaged with school events.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nYoung(x) ::: x is a young child or teenager.\nWish(x) ::: x wishes to further her academic career and educational opportunities.\nPremises:\n∀x (Perform(x) → Attend(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x (Perform(x) ⊕ Inactive(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (Inactive(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∀x (Young(x) ∧ Wish(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Student(bonnie) ∧ Attend(bonnie)) ⊕ ¬(Student(bonnie) ∨ Attend(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nConclusion:\n(Chaperone(bonnie) ∨ ¬Perform(bonnie)) → (Young(bonnie) ∧ Wish(bonnie) ⊕"
    ]
  },
  {
    "id": "FOLIO_dev_6",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is an animal.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMonkeypox(x) ::: x is a person with monkeypox.\nMonkeypoxVirus(x) ::: x is a monkeypox virus.\nOccur(x, y) ::: x occurs in y.\nHuman(x) ::: x is a human.\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nSymptom(x, y) ::: x is a symptom of y.\nFeel(x, y) ::: x feels y.\nGet(x, y) ::: x gets y.\nPremises:\nMonkeypox(p) ∧ MonkeypoxVirus(v) ∧ Occur(v, p) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∃x (MonkeypoxVirus(x) ∧ Occur(x, y)) ::: Monkeypox virus can occur in certain animals, including humans.\nHuman(h) ∧ Mammal(h) ∧ Animal(h) ::: Humans are mammals.\nMammal(m) ∧ Animal(m) ::: Mammals are animals.\n∀x (Symptom(x, monkeypox) ∧ Feel(p, x)) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Feel(p, x) ∧ Get(p, y)) ::: People feel tired when they get a glu.\nConclusion:\n∃x (Animal(x)) ::: There is an animal.\n------\n>>> Initial Program:\nPredicates:\nMonkeypox(x) ::: x is a person with monkeypox.\nMonkeypoxVirus(x) ::: x is a monkeypox virus"
    ]
  },
  {
    "id": "FOLIO_dev_7",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one gets flu.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMonkeypox(x) ::: x is a person with monkeypox.\nMonkeypoxVirus(x) ::: x is a monkeypox virus.\nOccur(x, y) ::: x occurs in y.\nHuman(x) ::: x is a human.\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nSymptom(x, y) ::: x is a symptom of y.\nFeel(x, y) ::: x feels y.\nGet(x, y) ::: x gets y.\nPremises:\nMonkeypox(p) ∧ MonkeypoxVirus(v) ∧ Occur(v, p) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (MonkeypoxVirus(x) → Occur(x, human)) ::: Monkeypox virus can occur in certain animals, including humans.\nHuman(h) ∧ Mammal(h) ∧ Animal(h) ::: Humans are mammals.\nMammal(m) ∧ Animal(m) ::: Mammals are animals.\n∀x (Symptom(x, monkeypox) → Feels(x, tired)) ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Feels(x, tired) → Get(x, flu)) ::: People feel tired when they get a glu.\nConclusion:\n¬∃x (Get(x, flu)) ::: No one gets flu.\n------\n>>> Initial Program:\nPredicates:\nMonkeypox(x) ::: x is a person with monkeypox.\nMonkeypoxVirus(x) ::: x is a monkeypox virus.\nOccur(x"
    ]
  },
  {
    "id": "FOLIO_dev_8",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Symptons of Monkeypox include coughing.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMonkeypox(x) ::: x is a person with monkeypox.\nMonkeypoxVirus(x) ::: x is a monkeypox virus.\nOccur(x, y) ::: x occurs in y.\nHuman(x) ::: x is a human.\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nSymptom(x, y) ::: x is a symptom of y.\nFeel(x, y) ::: x feels y.\nGet(x, y) ::: x gets y.\nPremises:\nMonkeypox(peter) ∧ MonkeypoxVirus(monkeypoxVirus) ∧ Occur(monkeypoxVirus, peter) ::: Peter has monkeypox.\n∀x (Monkeypox(x) → MonkeypoxVirus(x)) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (MonkeypoxVirus(x) → Occur(x, human)) ::: Monkeypox virus can occur in certain animals, including humans.\nHuman(peter) ∧ Mammal(peter) ∧ Animal(peter) ::: Peter is a human.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\n∀x (Symptom(monkeypox, x) → Feeling(peter, x)) ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Feeling(peter, x) → Get(peter, x)) ::: People feel tired when they get a glu.\nConclusion:\nSymptom(monkeypox, coughing) ::: Symptons of Monkeypox include\n------"
    ]
  },
  {
    "id": "FOLIO_dev_9",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Ocellated wild turkey.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a student if and only if the person is enrolled in a college or university.\nCollegeStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a college student if and only if the person is enrolled in a college or university.\nUniversityStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a university student if and only if the person is enrolled in a college or university.\nCollegeStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a college student if and only if the person is enrolled in a college or university.\nUniversityStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a university student if and only if the person is enrolled in a college or university.\nCollegeStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a college student if and only if the person is enrolled in a college or university.\nUniversityStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a university student if and only if the person is enrolled in a college or university.\nConclusion:\nStudent(x) ↔ Enrolled(x, collegeOrUniversity) ::: A person is a student if and only if the person is enrolled in a college or university.\n------\n>>> Initial Program:\nPredicates:\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGoulds(x) ::: x is a Gould's wild turkey.\nMerriams(x) ::: x is a Merriam's wild turkey.\nRioGrande(x) ::: x is a Rio Grande wild turkey.\nOcellated(x) ::: x is an Ocellated wild turkey"
    ]
  },
  {
    "id": "FOLIO_dev_10",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Eastern wild turkey.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGoulds(x) ::: x is a Gould's wild turkey.\nMerriams(x) ::: x is a Merriam's wild turkey.\nRioGrande(x) ::: x is a Rio Grande wild turkey.\nOcellated(x) ::: x is an Ocellated wild turkey.\nWildTurkey(x) ::: x is a wild turkey.\nPremises:\n¬Eastern(tom) ∧ ¬Osceola(tom) ∧ ¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom) ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nTom ∧ WildTurkey(tom) ::: Tom is a wild turkey.\nConclusion:\n¬Eastern(tom) ∧ ¬Osceola(tom) ∧ ¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom) ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\n------\n>>> Initial Program:\nPredicates:\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGoulds(x) ::: x is a Gould's wild turkey.\nMerriams(x) ::: x is a"
    ]
  },
  {
    "id": "FOLIO_dev_11",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joey is a wild turkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGoulds(x) ::: x is a Gould's wild turkey.\nMerriams(x) ::: x is a Merriam's wild turkey.\nRioGrande(x) ::: x is a Rio Grande wild turkey.\nOcellated(x) ::: x is an Ocellated wild turkey.\nWildTurkey(x) ::: x is a wild turkey.\nPremises:\n¬Eastern(tom) ∧ ¬Osceola(tom) ∧ ¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom) ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nTom ∧ WildTurkey(tom) ::: Tom is a wild turkey.\nConclusion:\nWildTurkey(joey) ::: Joey is a wild turkey\n------\n>>> Initial Program:\nPredicates:\nMale(x) ::: x is a male.\nFemale(x) ::: x is a female.\nHuman(x) ::: x is a human.\nPremises:\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∃x (Male(x) ∧ Female(x)) ::: There is a male who is also a female.\nConclusion:\n∃x (Male(x) ∧ Female(x) ∧ Human(x)) ::: There"
    ]
  },
  {
    "id": "FOLIO_dev_12",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is in the Top 10 list.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nJapanese(x) ::: x is a Japanese game company.\nGame(x) ::: x is a game.\nTop10(x) ::: x is in the Top 10 list.\nSell(x, y) ::: x sells y copies.\nCreate(x, y) ::: x created y.\nPremises:\nJapanese(japaneseGameCompany) ∧ Create(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Top10(x) → ∃y (Game(y) ∧ Create(x, y) ∧ Japanese(x))) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x (Sell(x, y) → Top10(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSell(legendOfZelda, million) ::: The Legend of Zelda sold more than one million copies.\nConclusion:\nTop10(legendOfZelda) ::: The Legend of Zelda is in the Top 10 list.\n------\n>>> Initial Program:\nPredicates:\nJapanese(x) ::: x is a Japanese game company.\nGame(x) ::: x is a game.\nTop10(x) ::: x is in the Top 10 list.\nSell(x, y) ::: x sells y copies.\nCreate(x, y) ::: x created y.\nPremises:\nJapanese(japaneseGameCompany) ∧ Create(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Top10(x) → ∃y (Game(y) ∧ Create(x, y)"
    ]
  },
  {
    "id": "FOLIO_dev_13",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nJapanese(x) ::: x is a Japanese game company.\nGame(x) ::: x is a game.\nTop10(x) ::: x is in the Top 10 list.\nSell(x, y) ::: x sells y copies.\nLegendOfZelda(x) ::: x is the Legend of Zelda.\nFIFA22(x) ::: x is FIFA 22.\nPremises:\nJapanese(japaneseGameCompany) ∧ Game(legendOfZelda) ∧ Top10(legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Game(x) ∧ Top10(x) → Japanese(x)) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x (Game(x) ∧ Sell(x, y) → Top10(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSell(legendOfZelda, million) ::: The Legend of Zelda sold more than one million copies.\nConclusion:\nTop10(legendOfZelda) ::: The Legend of Zelda is in the Top 10 list.\n------\n>>> Initial Program:\nPredicates:\nJapanese(x) ::: x is a Japanese game company.\nGame(x) ::: x is a game.\nTop10(x) ::: x is in the Top 10 list.\nSell(x, y) ::: x sells y copies.\nLegendOfZelda(x) ::: x is the Legend of Zelda.\nFIFA22(x) ::: x is FIFA 22.\nPremises:\nJapanese(japaneseGameCompany) ∧ Game(legendOfZelda) ∧"
    ]
  },
  {
    "id": "FOLIO_dev_16",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\nExist(x) ::: x exists.\nPremises:\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x (Turtle(x) ∧ Exist(x)) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\n∃x (Squirrel(x) ∧ Still(x)) ::: Rock is still.\nConclusion:\nTurtle\n------"
    ]
  },
  {
    "id": "FOLIO_dev_17",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is not a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\nExist(x) ::: x exists.\nPremises:\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x (Turtle(x) ∧ Exist(x)) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\n∃x (Still(x) ∧ Exist(x)) ::: Rock is still.\nConclusion:\n¬(Turtle"
    ]
  },
  {
    "id": "FOLIO_dev_18",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle or cute.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\nCute(x) ::: x is cute.\nExist(x) ::: x exists.\nPremises:\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x (Turtle(x) ∧ Exist(x)) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\n∀x (Still(x) ∧ Rock(x)) ::: Rock\nCon"
    ]
  },
  {
    "id": "FOLIO_dev_19",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCute(x) ::: x is cute.\nExist(x) ::: x exists.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\nRabbit(x) ::: x is a rabbit.\nSquirrel(x) ::: x is a squirrel.\nTurtle(x) ::: x is a turtle.\nPremises:\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x (Exist(x) ∧ Turtle(x)) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\n∀x (Still(x) ∧ Rock(x)) ::: Rock\nCon"
    ]
  },
  {
    "id": "FOLIO_dev_25",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is located in southern China.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCapital(x) ::: x is the capital of a country.\nPopulous(x) ::: x is the most populous city in a country.\nLocated(x, y) ::: x is located in y.\nHost(x, y) ::: x hosted y.\nUniversity(x) ::: x is a university.\nRank(x, y) ::: x consistently ranks among the best in y.\nPremises:\nCapital(beijing) ∧ Populous(beijing) ∧ Located(beijing, northernChina) ∧ Host(beijing, summerOlympics) ∧ Host(beijing, summerParalympics) ∧ Host(beijing, winterOlympics) ∧ Host(beijing, winterParalympics) ∧ ∃x (University(x) ∧ Rank(x, asiaPacific)) ∧ ∃x (University(x) ∧ Rank(x, world)) ::: Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and"
    ]
  },
  {
    "id": "FOLIO_dev_30",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic is a Grand Slam champion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGrandSlamChampion(x) ::: x is a Grand Slam champion.\nOscarNominatedActor(x) ::: x is an Oscar-nominated actor.\nProfessionalTennisPlayer(x) ::: x is a professional tennis player.\nCelebrity(x) ::: x is a celebrity.\nWellPaid(x) ::: x is well paid.\nFamous(x) ::: x is famous.\nLiveIn(x, y) ::: x lives in y.\nTaxHaven(y) ::: y is a tax haven.\nPremises:\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (Athlete(x) → F"
    ]
  },
  {
    "id": "FOLIO_dev_31",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic lives in a tax haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGrandSlamChampion(x) ::: x is a Grand Slam champion.\nOscarNominatedActor(x) ::: x is an Oscar-nominated actor.\nProfessionalTennisPlayer(x) ::: x is a professional tennis player.\nCelebrity(x) ::: x is a celebrity.\nWellPaid(x) ::: x is well paid.\nFamous(x) ::: x is famous.\nLiveIn(x, y) ::: x lives in y.\nTaxHaven(y) ::: y is a tax haven.\nPremises:\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (Athlete(x) → F"
    ]
  },
  {
    "id": "FOLIO_dev_32",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic does not live in a tax haven.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGrandSlamChampion(x) ::: x is a Grand Slam champion.\nOscarNominatedActor(x) ::: x is an Oscar-nominated actor.\nProfessionalTennisPlayer(x) ::: x is a professional tennis player.\nCelebrity(x) ::: x is a celebrity.\nWellPaid(x) ::: x is well paid.\nFamous(x) ::: x is famous.\nLiveIn(x, y) ::: x lives in y.\nTaxHaven(y) ::: y is a tax haven.\nPremises:\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (Athlete(x) → F"
    ]
  },
  {
    "id": "FOLIO_dev_35",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "The 2022 FIFA World Cup was the 22nd FIFA World Cup, an international men's football tournament that was held in Qatar from 20 November to 18 December 2022. The tournament was the first World Cup to be held in the Arab world and the first to be held in a Muslim-majority country. The 2022 World Cup was also the first World Cup to be held in the Northern Hemisphere's winter.\nThe 2022 FIFA World Cup was the 22nd FIFA World Cup, an international men's football tournament that was held in Qatar from 20 November to 18 December 2022. The tournament was the first World Cup to be held in the Arab world and the first to be held in a Muslim-majority country. The 2022 World Cup was also the first World Cup to be held in the Northern Hemisphere's winter.\nThe 2022 FIFA World Cup was the 22nd FIFA World Cup, an international men's football tournament that was held in Qatar from 20 November to 18 December 2022. The tournament was the first World Cup to be held in the Arab world and the first to be held in a Muslim-majority country. The 2022 World Cup was also"
    ]
  },
  {
    "id": "FOLIO_dev_37",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some orchestras premiered music pieces.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nMusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\n∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.\nWrite(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nLead(beethoven, viennaMusicSociety) ∧ Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra and Beethoven leads the Vienna Music Society.\n∀x (Orchestra(x) → ∃y (Lead(y, x) ∧ Conductor(y))) ::: Orchestras are led by conductors.\nConclusion:\n¬Conductor(beethoven) ::: Beethoven is not a conductor.\n------\nProblem:\nAll people who regularly\n>>> Error Message:\n(FATAL)\n%%ERROR: The following symbols are used with multiple arities: MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: MusicPiece/1, MusicPiece/0\n>>> Corre"
    ]
  },
  {
    "id": "FOLIO_dev_39",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is a mass product design.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "All of the people who are not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the person who is not in the same room as the"
    ]
  },
  {
    "id": "FOLIO_dev_40",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is evocative and dreamy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDesign(x) ::: x is a design.\nDesignStyle(x) ::: x is a design style.\nTimeless(x) ::: x is timeless.\nMassProduct(x) ::: x is a mass product.\nEvocative(x) ::: x is evocative.\nDreamy(x) ::: x is dreamy.\nPremises:\n∀x (DesignStyle(x) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.\n∃x (Design(x) ∧ (DesignStyle(x) ∨ DesignStyle(y))) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x (Timeless(x) → MassProduct(x) ∧ Evocative(x)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nConclusion:\nEvocative(max) ∧ Dreamy(max) ::: A design by Max is evocative and dreamy.\n------\n>>> Initial Program:\nPredicates:\nMovie(x) ::: x is a movie.\nDirector(x) ::: x is a director.\nActor(x) ::: x is an actor.\nMovieGenre(x) ::: x is a movie genre.\nPremises:\n∀x (Movie(x) → ∃y (Director(y) ∧ Movie(y))) ::: All movies have a director.\n∀x (Movie(x) → ∃y (Actor(y) ∧ Movie(y))) ::: All movies have an actor.\n∀x (Movie(x) → ∃y (MovieGenre(y) ∧ Movie(y))) ::: All movies have a movie genre.\n∀x (MovieGenre(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movie genres have a movie.\n∀x (Movie(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movies have a movie genre.\n∀x (Movie(x) → ∃y (Movie(y) ∧ Director(y))) ::: All movies have a director.\n∀x (Movie(x) → ∃y (Movie(y) ∧ Actor(y))) ::: All movies have an actor.\nConclusion:\n∀x (Movie(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movies have a movie genre.\n------\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nMovie(x) ::: x is a movie.\nDirector(x) ::: x is a director.\nActor(x) ::: x is an actor.\nMovieGenre(x) ::: x is a movie genre.\nPremises:\n∀x (Movie(x) → ∃y (Director(y) ∧ Movie(y))) ::: All movies have a director.\n∀x (Movie(x) → ∃y (Actor(y) ∧ Movie(y))) ::: All movies have an actor.\n∀x (Movie(x) → ∃y (MovieGenre(y) ∧ Movie(y))) ::: All movies have a movie genre.\n∀x (MovieGenre(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movie genres have a movie.\n∀x (Movie(x) → ∃y"
    ]
  },
  {
    "id": "FOLIO_dev_41",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is either evocative or dreamy.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDesign(x) ::: x is a design.\nDesignStyle(x) ::: x is a design style.\nTimeless(x) ::: x is timeless.\nMassProduct(x) ::: x is a mass product.\nEvocative(x) ::: x is evocative.\nDreamy(x) ::: x is dreamy.\nPremises:\n∀x (DesignStyle(x) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.\n∃x (Design(x) ∧ (DesignStyle(x) ∨ DesignStyle(y))) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x (Timeless(x) → MassProduct(x) ∧ Evocative(x)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nConclusion:\n∀x (Design(x) → (Evocative(x) ∨ Dreamy(x))) ::: A design by\n------\n>>> Initial Program:\nPredicates:\nMovie(x) ::: x is a movie.\nDirector(x) ::: x is a director.\nActor(x) ::: x is an actor.\nMovieGenre(x) ::: x is a movie genre.\nPremises:\n∀x (Movie(x) → ∃y (Director(y) ∧ Movie(y))) ::: All movies have a director.\n∀x (Movie(x) → ∃y (Actor(y) ∧ Movie(y))) ::: All movies have an actor.\n∀x (Movie(x) → ∃y (MovieGenre(y) ∧ Movie(y))) ::: All movies have a movie genre.\n∀x (MovieGenre(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movie genres have a movie.\n∀x (Movie(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movies have a movie genre.\n∀x (Movie(x) → ∃y (Movie(y) ∧ Director(y))) ::: All movies have a director.\n∀x (Movie(x) → ∃y (Movie(y) ∧ Actor(y))) ::: All movies have an actor.\nConclusion:\n∀x (Movie(x) → ∃y (Movie(y) ∧ MovieGenre(y) ∧ Director(y) ∧ Actor(y))) ::: All movies have a movie genre, a director, and an actor.\n>>> Error Message:\nParsing Error\n>>> Correct Program:\nPredicates:\nMovie(x) ::: x is a movie.\nDirector(x) ::: x is a director.\nActor(x) ::: x is an actor.\nMovieGenre(x) ::: x is a movie genre.\nPremises:\n∀x (Movie(x) → ∃y (Director(y) ∧ Movie(y))) ::: All movies have a director.\n∀x (Movie(x) → ∃y (Actor(y) ∧ Movie(y))) ::: All movies have an actor.\n∀x (Movie(x) → ∃y (MovieGenre(y) ∧ Movie(y))) ::: All movies have a movie genre.\n∀x (MovieGenre(x) → ∃y (Movie(y) ∧ MovieGenre(y))) ::: All movie"
    ]
  },
  {
    "id": "FOLIO_dev_42",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is among the most active players in major tennis.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\nActive(x) ::: x is among the most active players in major tennis.\nLost(x, y) ::: x lost to y.\nFemale(x) ::: x is a female tennis player.\nMale(x) ::: x is a male tennis player.\nPlayer(x) ::: x is a tennis player.\nRolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.\nPremises:\n∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (Lost(x, iga) → RankedHighly(x)) ::: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ RolandGarros2022(x) → Lost(x, iga)) ::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n∀x (Male(x) ∧ RolandGarros2022(x) → Lost(x, rafael)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n∃x (Player(x) ∧ RolandGarros2022(x) → Lost(x, iga)) ::: Some tennis player at Roland Garros 2022 lost to Iga Świątek.\nConclusion:\n∃x (Player(x) ∧ RolandGarros2022(x) → Lost(x, rafael)) ::: Some tennis player at Roland Garros 2022 lost to Rafael Nadal.\n------\n>>> Initial Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Female(x) → Person(x)) ::: All females are persons.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Male(x) → Person(x)) ::: All males are persons.\n------\n>>> Initial Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Female(x) → Person(x)) ::: All females are persons.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_43",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\nActive(x) ::: x is among the most active players in major tennis.\nLost(x, y) ::: x lost to y.\nFemale(x) ::: x is a female tennis player.\nMale(x) ::: x is a male tennis player.\nPlayer(x) ::: x is a tennis player.\nRolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.\nPremises:\n∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (Lost(x, iga) → RankedHighly(x)) ::: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ RolandGarros2022(x) → Lost(x, iga)) ::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n∀x (Male(x) ∧ RolandGarros2022(x) → Lost(x, rafael)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n∃x (Player(x) ∧ RolandGarros2022(x) → Lost(x, iga)) ::: Some tennis player at Roland Garros 2022 lost to Iga Świątek.\nConclusion:\n∃x (Player(x) ∧ RolandGarros2022(x) → Lost(x, rafael)) ::: Some tennis player at Roland Garros 2022 lost to Rafael Nadal.\n------\n>>> Initial Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Female(x) → Person(x)) ::: All females are persons.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Male(x) → Person(x)) ::: All males are persons.\n------\n>>> Initial Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Female(x) → Person(x)) ::: All females are persons.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_44",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\nActive(x) ::: x is among the most active players in major tennis.\nLost(x, y) ::: x lost to y.\nFemale(x) ::: x is a female tennis player.\nMale(x) ::: x is a male tennis player.\nPlayer(x) ::: x is a tennis player.\nRolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.\nPremises:\n∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (Lost(x, iga) → RankedHighly(x)) ::: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ RolandGarros2022(x) → Lost(x, iga)) ::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n∀x (Male(x) ∧ RolandGarros2022(x) → Lost(x, rafael)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n∃x (Player(x) ∧ RolandGarros2022(x) → Lost(x, iga)) ::: Some tennis player at Roland Garros 2022 lost to Iga Świątek.\nConclusion:\n∃x (Player(x) ∧ RolandGarros2022(x) → Lost(x, rafael)) ::: Some tennis player at Roland Garros 2022 lost to Rafael Nadal.\n------\n>>> Initial Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Female(x) → Person(x)) ::: All females are persons.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Male(x) → Person(x)) ::: All males are persons.\n------\n>>> Initial Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::: x is a human.\nPerson(x) ::: x is a person.\nPremises:\n∀x (Female(x) → Human(x)) ::: All females are humans.\n∀x (Male(x) → Human(x)) ::: All males are humans.\n∀x (Human(x) → Person(x)) ::: All humans are persons.\nConclusion:\n∀x (Female(x) → Person(x)) ::: All females are persons.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nHuman(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_46",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is summer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, summer) ::: James's favorite season is summer.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSummer ::: summer is a season.\nSpring ::: spring is a season.\nFall ::: fall is a season.\nWinter ::: winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, summer) ::: James's favorite season is summer.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSummer ::: summer is a season.\nSpring ::: spring is a season.\nFall ::: fall is a season.\nWinter ::: winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, summer) ::: James's favorite season is summer.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSummer ::: summer is a season.\nSpring ::: spring is a season.\nFall ::: fall is a season.\nWinter ::: winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, summer) ::: James's favorite season is summer.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite("
    ]
  },
  {
    "id": "FOLIO_dev_47",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is fall.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, fall) ::: James's favorite season is fall.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSummer ::: summer is a season.\nSpring ::: spring is a season.\nFall ::: fall is a season.\nWinter ::: winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, fall) ::: James's favorite season is fall.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, fall) ::: James's favorite season is fall.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSummer ::: summer is a season.\nSpring ::: spring is a season.\nFall ::: fall is a season.\nWinter ::: winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(james, fall) ::: James's favorite season is fall.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(j"
    ]
  },
  {
    "id": "FOLIO_dev_48",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mia's favorite season is spring.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(mia, spring) ::: Mia's favorite season is spring.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSpring ::: Spring is a season.\nSummer ::: Summer is a season.\nFall ::: Fall is a season.\nWinter ::: Winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(mia, spring) ::: Mia's favorite season is spring.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(mia, spring) ::: Mia's favorite season is spring.\n------\n>>> Initial Program:\nPredicates:\nStudent(x) ::: x is a student.\nWant(x, y) ::: x wants y.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x's favorite is y.\nSeason(x) ::: x is a season.\nSpring ::: Spring is a season.\nSummer ::: Summer is a season.\nFall ::: Fall is a season.\nWinter ::: Winter is a season.\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:\nFavorite(mia, spring) ::: Mia's favorite season is spring.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\n∀x (Student(x) → ∃y (Want(x, y) ∧ Season(y))) ::: All students who want to have a long vacation love summer the most.\nFavorite(emma, summer) ::: Emma's favorite season is summer.\nFavorite(mia, x) ∧ ¬(x = summer) ::: Mia's favorite season is not the same as Emma's.\nWant(james, longVacation) ::: James wants to have a long vacation.\nConclusion:"
    ]
  },
  {
    "id": "FOLIO_dev_49",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is printed text.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStudent(x) ::: x is a student.\nEmployee(x) ::: x is an employee.\nUnemployed(x) ::: x is unemployed.\nPremises:\n∀x (¬Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All people who are not students are either employees or unemployed.\n∀x (Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All students are either employees or unemployed.\n∀x (Employee(x) → (Student(x) ∨ ¬Student(x))) ::: All employees are either students or people who are not students.\nConclusion:\n∀x (Student(x) ∨ ¬Student(x)) ::: All people are either students or people who are not students.\n------\nProblem:\nAll people who are not students are either employees or unemployed. All students are either employees or unemployed. All employees are either students or people who are not students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All people are either students or people who are not students.\n###\nPredicates:\nStudent(x) ::: x is a student.\nEmployee(x) ::: x is an employee.\nUnemployed(x) ::: x is unemployed.\nPremises:\n∀x (¬Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All people who are not students are either employees or unemployed.\n∀x (Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All students are either employees or unemployed.\n∀x (Employee(x) → (Student(x) ∨ ¬Student(x))) ::: All employees are either students or people who are not students.\nConclusion:\n∀x (Student(x) ∨ ¬Student(x)) ::: All people are either students or people who are not students.\n------\nProblem:\nAll people who are not students are either employees or unemployed. All students are either employees or unemployed. All employees are either students or people who are not students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All people are either students or people who are not students.\n###\nPredicates:\nStudent(x) ::: x is a student.\nEmployee(x) ::: x is an employee.\nUnemployed(x) ::: x is unemployed.\nPremises:\n∀x (¬Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All people who are not students are either employees or unemployed.\n∀x (Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All students are either employees or unemployed.\n∀x (Employee(x) → (Student(x) ∨ ¬Student(x))) ::: All employees are either students or people who are not students.\nConclusion:\n∀x (Student(x) ∨ ¬Student(x)) ::: All people are either students or people who are not students.\n------\nProblem:\nAll people who are not students are either employees or unemployed. All students are either employees or unemployed. All employees are either students or people who are not students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? All people are either students or people who are not students.\n###\nPredicates:\nStudent(x) ::: x is a student.\nEmployee(x) ::: x is an employee.\nUnemployed(x) ::: x is unemployed.\nPremises:\n∀x (¬Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All people who are not students are either employees or unemployed.\n∀x (Student(x) → (Employee(x) ∨ Unemployed(x))) ::: All students are either employees or unemployed.\n∀x (Employee(x) → (Student(x) ∨ ¬Student(x))) ::: All employees are either students or people who are not students.\nCon"
    ]
  },
  {
    "id": "FOLIO_dev_52",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Basque is a Romance language.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLanguage(x) ::: x is a language.\nRomanceLanguage(x) ::: x is a Romance language.\nIndoEuropeanLanguage(x) ::: x is an Indo-European language.\nLanguageFamily(x) ::: x is a language family.\nRelated(x, y) ::: x is related to y.\nPremises:\n∀x (Language(x) → (RomanceLanguage(x) ∨ ¬RomanceLanguage(x))) ::: All languages are either Romance languages or not Romance languages.\n∀x (Language(x) → (IndoEuropeanLanguage(x) ∨ ¬IndoEuropeanLanguage(x))) ::: All languages are either Indo-European languages or not Indo-European languages.\n∀x (Language(x) → (LanguageFamily(x) ∨ ¬LanguageFamily(x))) ::: All languages are either language families or not language families.\n∀x (LanguageFamily(x) → (∀y (Language(y) → Related(y, x)))) ::: All languages within a language family are related to each other.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_53",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? German is a Romance language.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nLanguage(x) ::: x is a language.\nRomanceLanguage(x) ::: x is a Romance language.\nIndoEuropeanLanguage(x) ::: x is an Indo-European language.\nLanguageFamily(x) ::: x is a language family.\nRelated(x, y) ::: x is related to y.\nPremises:\n∀x (Language(x) → (RomanceLanguage(x) ∨ ¬RomanceLanguage(x))) ::: All languages are either Romance languages or not Romance languages.\n∀x (Language(x) → (IndoEuropeanLanguage(x) ∨ ¬IndoEuropeanLanguage(x))) ::: All languages are either Indo-European languages or not Indo-European languages.\n∀x (Language(x) → (LanguageFamily(x) ∨ ¬LanguageFamily(x))) ::: All languages are either language families or not language families.\n∀x (LanguageFamily(x) → (∀y (Language(y) → Related(y, x)))) ::: All languages within a language family are related to each other.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_54",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? French is an Indo-European language.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "All people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are\n------\nProblem:\nAll people who are\n>>>"
    ]
  },
  {
    "id": "FOLIO_dev_58",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Butte and Pierre are in the same state.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCity(x) ::: x is a city.\nState(x) ::: x is a state.\nIncludes(x, y) ::: x includes y.\nSameState(x, y) ::: x and y are in the same state.\nPremises:\nCity(billings) ∧ City(butte) ∧ City(helena) ∧ City(missoula) ::: Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula.\nCity(whiteSulphurSprings) ∧ City(butte) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.\nCity(pierre) ∧ ¬(City(pierre) ∧ Includes(montana, pierre)) ::: The city of Pierre is not in Montana.\n∀x (City(x) ∧ Includes(butte, x) → ¬(City(x) ∧ Includes(pierre, x))) ::\nCon"
    ]
  },
  {
    "id": "FOLIO_dev_59",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierre and Bismarck are in the same state.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCity(x) ::: x is a city.\nState(x) ::: x is a state.\nIncludes(x, y) ::: x includes y.\nSameState(x, y) ::: x and y are in the same state.\nPremises:\nCity(billings) ∧ City(butte) ∧ City(helena) ∧ City(missoula) ∧ Includes(montana, butte) ∧ Includes(montana, helena) ∧ Includes(montana, missoula) ∧ Includes(whiteSulphurSprings, butte) ::: Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state.\nCity(pierre) ∧ ¬Includes(montana, pierre) ∧ ¬Includes(butte, pierre) ::: The city of Pierre is not in Montana. Any city in Butte is not in Pierre.\nConclusion:\nSameState(pierre"
    ]
  },
  {
    "id": "FOLIO_dev_66",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nYaleUniversity(x) ::: x is Yale University.\nPrivate(x) ::: x is a private university.\nIvyLeague(x) ::: x is an Ivy League university.\nResearchUniversity(x) ::: x is a research university.\nMove(x, y) ::: x moved to y.\nEndowment(x, y) ::: x's endowment is valued at y.\nOrganized(x, y) ::: x is organized into y.\nResidentialCollege(x) ::: x is a residential college.\nPremises:\nYaleUniversity(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\nYaleUniversity(yale) ∧ Move(yale, newHaven) ::: Yale University moved to New Haven.\nYaleUniversity(yale) ∧ Endowment(yale, $42.3 billion) ::: Yale university's endowment was valued at $42.3 billion.\nYaleUnivers"
    ]
  },
  {
    "id": "FOLIO_dev_67",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nYaleUniversity(x) ::: x is Yale University.\nPrivate(x) ::: x is a private university.\nIvyLeague(x) ::: x is an Ivy League university.\nResearchUniversity(x) ::: x is a research university.\nMove(x, y) ::: x moved to y.\nEndowment(x) ::: x is an endowment.\nValue(x, y) ::: x is valued at y.\nOrganize(x, y) ::: x is organized into y.\nResidentialCollege(x) ::: x is a residential college.\nPremises:\nYaleUniversity(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\nYaleUniversity(yale) ∧ Move(yale, newHaven) ::: Yale University moved to New Haven in 1716.\nYaleUniversity(yale) ∧ Endowment(endowment) ∧ Value(endowment, $42."
    ]
  },
  {
    "id": "FOLIO_dev_68",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierson College is a residential college at Yale.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nYaleUniversity(x) ::: x is Yale University.\nPrivate(x) ::: x is a private university.\nIvyLeague(x) ::: x is an Ivy League university.\nResearchUniversity(x) ::: x is a research university.\nMove(x, y) ::: x moved to y.\nEndowment(x, y) ::: x's endowment is valued at y.\nOrganized(x, y) ::: x is organized into y.\nResidentialCollege(x) ::: x is a residential college.\nPremises:\nYaleUniversity(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\nYaleUniversity(yale) ∧ Move(yale, newHaven) ::: Yale University moved to New Haven in 1716.\nYaleUniversity(yale) ∧ Endowment(yale, $42.3 billion) ::: Yale university's endowment was valued at $42.3"
    ]
  },
  {
    "id": "FOLIO_dev_70",
    "context": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStar(x, y) ::: x starred for show y.\nPilot(x, y) ::: x piloted show y.\nScriptEditor(x, y) ::: x was the script editor for show y.\nWorkingTitle(x, y) ::: x was the working title for show y.\nPremises:\n∀x (Star(x, badults) → ¬(Star(x, show1) ∧ Pilot(show1, bbcTwo) ∧ Pilot(show1, bbcThree))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nBadults ∧ Pilot(badults, bbcThree) ::: Badults piloted in July 2013 on BBC Three.\nBadults ∧ WorkingTitle(badults, secretDudeSociety) ::: The Working title \"The Secret Dude Society\" was used for Badults.\nBadults ∧ ScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults\nConclusion:��"
    ]
  },
  {
    "id": "FOLIO_dev_76",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nWork(x, y) ::: x works in y.\nNeed(x, y) ::: x needs to earn y.\nOrder(x, y) ::: x orders y frequently.\nEnjoy(x, y) ::: x enjoys y.\nPicky(x) ::: x is a picky eater.\nSpend(x, y) ::: x spends y.\nPremises:\n∀x (Work(x, campus) → Need(x, money)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (Order(x, takeout) → Work(x, campus)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (Order(x, takeout) ⊕ Enjoy(x, diningHallMeals)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x, diningHallMeals) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters"
    ]
  },
  {
    "id": "FOLIO_dev_77",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nWork(x, y) ::: x works in job y.\nNeed(x, y) ::: x needs to earn money to help pay for y.\nOrder(x, y) ::: x orders takeout y.\nFrequently(x, y) ::: x does y frequently.\nEnjoy(x, y) ::: x enjoys y.\nPicky(x) ::: x is a picky eater.\nSpend(x, y) ::: x spends time doing y.\nPremises:\n∀x (Work(x, studentJobsOnCampus) → Need(x, collegeTuition)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (Order(x, takeout) ∧ Frequently(x, college)) → Work(x, studentJobsOnCampus) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (Frequently(x, takeout) ∨ Enjoy(x, diningHallMealsAndRecipes)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x, diningHallMealsAndRecipes) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (Enjoy(x, diningHallMealsAndRecipes) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nConclusion:\nSpend(x, diningHallMealsAndRecipes) ::: People spend time enjoying the dining hall meals and recipes.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_78",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nWork(x, y) ::: x works in job y.\nNeed(x, y) ::: x needs to earn money to help pay for y.\nOrder(x, y) ::: x orders takeout y.\nFrequently(x, y) ::: x does y frequently.\nEnjoy(x, y) ::: x enjoys y.\nPicky(x) ::: x is a picky eater.\nSpend(x, y) ::: x spends time doing y.\nPremises:\n∀x (Work(x, studentJobsOnCampus) → Need(x, collegeTuition)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (Order(x, takeout) ∧ Frequently(x, college)) → Work(x, studentJobsOnCampus) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (Frequently(x, takeout) ∨ Enjoy(x, diningHallMealsAndRecipes)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x, diningHallMealsAndRecipes) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (Enjoy(x, diningHallMealsAndRecipes) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nConclusion:\nSpend(x, diningHallMealsAndRecipes) ::: People spend time enjoying the dining hall meals and recipes.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_80",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are not a product of Baked by Melissa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x) ::: x is spicy.\nProduct(x, y) ::: x is a product of y.\nPremises:\n¬∃x (Bakery(x) ∧ Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(bakedByMelissa, x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n∀x (DriedThaiChilies(x) → (Spicy(x) ∨ Bakery(x))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nConclusion:\n¬Product(bakedByMelissa, driedThaiChilies) ::: Dried Thai chilies are not a product of Baked by Melissa.\n------\n>>> Initial Program:\nPredicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x) ::: x is spicy.\nProduct(x, y) ::: x is a product of y.\nPremises:\n¬�"
    ]
  },
  {
    "id": "FOLIO_dev_81",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are a hotpot.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "All people\n------\nProblem:\nAll people\n>>> Error Message:\n(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0\n>>> Corrected Program:\nAll people\n------\nProblem:\nAll people\n>>> Error Message:\n(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0\n>>> Corrected Program:\nAll people\n------\nProblem:\nAll people\n>>> Error Message:\n(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0\n>>> Corrected Program:\nAll people\n------\nProblem:\nAll people\n>>> Error Message:\n(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DriedThaiChilies/1, DriedThaiChilies/0\n>>> Corrected Program:\nAll people\n------\nProblem:\nAll people"
    ]
  },
  {
    "id": "FOLIO_dev_82",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x) ::: x is spicy.\nProduct(x, y) ::: x is a product of y.\nPremises:\n¬∀x (Bakery(x) ∧ Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) ∧ Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(bakedByMelissa, x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x))) → (Hotpot(x) ∨ Spicy(x)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nConclusion:\n¬∃x (Bakery(x) ∧ Product(x, bakedByMelissa)) ::: There is no bakery that is a product of Baked by Melissa.\n------\n>>> Initial Program:\nPredicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x)"
    ]
  },
  {
    "id": "FOLIO_dev_83",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x) ::: x is spicy.\nProduct(x, y) ::: x is a product of y.\nPremises:\n¬∀x (Bakery(x) → Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(x, bakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n∀x (DriedThaiChilies(x) → (Spicy(x) ∨ Bakery(x))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nConclusion:\nProduct(driedThaiChilies, bakedByMelissa) ∧ Cupcake(driedThaiChilies) ::: Dried Thai chilies\n------\n>>> Initial Program:\nPredicates:\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nSpicy(x) ::: x is spicy.\nProduct(x, y) ::: x is a product of y.\nPremises:"
    ]
  },
  {
    "id": "FOLIO_dev_84",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRestaurant(x) ::: x is a restaurant.\nYelpRecommendation(x) ::: x is listed in Yelp’s recommendations.\nNegativeReview(x) ::: x receives many negative reviews.\nTakeOutService(x) ::: x provides take-out service.\nRating(x) ::: x has a rating.\nPopular(x) ::: x is popular among local residents.\nPremises:\n∀x (YelpRecommendation(x) → ¬NegativeReview(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (Rating(x) > 9 → YelpRecommendation(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∀x (TakeOutService(x) → NegativeReview(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (Popular(x) → Rating(x) > 9) ::: All restaurants that are popular among local residents have ratings greater than 9.\nSubway(r) ::: r is Subway.\nRating(r) > 9 ∨ Popular(r) ::: Subway has a rating greater than 9 or is popular among local residents.\nConclusion:\nTakeOutService(r) ∧ ¬NegativeReview(r) ::: Subway provides take-out service and does not receive many negative reviews.\n------\n>>> Initial Program:\nPredicates:\nRestaurant(x) ::: x is a restaurant.\nYelpRecommendation(x) ::: x is listed in Yelp’s recommendations.\nNegativeReview"
    ]
  },
  {
    "id": "FOLIO_dev_85",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Subway provides take-out service and does not receive many negative reviews.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRestaurant(x) ::: x is a restaurant.\nYelpRecommendation(x) ::: x is listed in Yelp’s recommendations.\nNegativeReview(x) ::: x receives many negative reviews.\nTakeOut(x) ::: x provides take-out service.\nRating(x, y) ::: x has a rating of y.\nPopular(x) ::: x is popular among local residents.\nPremises:\n∀x (YelpRecommendation(x) → ¬NegativeReview(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (Rating(x, 9) → YelpRecommendation(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∀x (¬TakeOut(x) → NegativeReview(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (Popular(x) → Rating(x, 9)) ::: All restaurants that are popular among local residents have ratings greater than 9.\nSubway(r) ::: Subway is a restaurant.\nRating(r, 9) ∨ Popular(r) ::: Subway has a rating greater than 9 or is popular among local residents.\nConclusion:\nTakeOut(r) ∧ ¬NegativeReview(r) ::: Subway provides take-out service and does not receive many negative reviews.\n------\n>>> Initial Program:\nPredicates:\nRestaurant(x) ::: x is a restaurant.\nYelpRecommendation(x) ::: x is listed in Yelp’s recommendations.\nNeg"
    ]
  },
  {
    "id": "FOLIO_dev_86",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Subway does not provide take-out service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nRestaurant(x) ::: x is a restaurant.\nYelpRecommendation(x) ::: x is listed in Yelp’s recommendations.\nNegativeReview(x) ::: x receives many negative reviews.\nTakeOut(x) ::: x provides take-out service.\nRating(x, y) ::: x has a rating of y.\nPopular(x) ::: x is popular among local residents.\nPremises:\n∀x (YelpRecommendation(x) → ¬NegativeReview(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (Rating(x, 9) → YelpRecommendation(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∀x (¬TakeOut(x) → NegativeReview(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (Popular(x) → Rating(x, 9)) ::: All restaurants that are popular among local residents have ratings greater than 9.\nSubway(r) ::: r is Subway.\nRating(r, 9) ∨ Popular(r) ::: Subway has a rating greater than 9 or is popular among local\nConclusion:\nTakeOut(r) ∧ ¬NegativeReview(r) ::: Subway provides take-out service and does not receive many negative reviews.\n------\n>>> Initial Program:\nPredicates:\nRestaurant(x) ::: x is a restaurant.\nYelpRecommendation(x) ::: x is listed in Yelp’s recommendations.\nNegativeReview("
    ]
  },
  {
    "id": "FOLIO_dev_87",
    "context": "In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Sir Digby’s nemesis loses.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nGoodGuy(x) ::: x is a good guy.\nBadGuy(x) ::: x is a bad guy.\nFight(x, y) ::: x fights y.\nWin(x) ::: x wins.\nLose(x) ::: x loses.\nSuperheroMovie(x) ::: x is a superhero movie.\nCharacter(x) ::: x is a character.\nName(x, y) ::: x is named y.\nAppear(x, y) ::: x appears in y.\nPremises:\n∀x (SuperheroMovie(x) → GoodGuy(x)) ::: In superhero movies, the good guys always win.\nSuperheroMovie(surprisingAdventuresOfSirDigbyChickenCaesar) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n∀x ∀y (Fight(x, y) ∧ Win(x)) → Lose(y) ::: Good guys fight bad guys and vice versa.\n∀x ∀y (Fight(x, y) ∧ Win(x)) → Lose(y) ::: If a superhero movie is named after a character, that character is a good guy.\n∀x ∀y (Name(x, y) ∧ Character(y)) → GoodGuy(x) ::: If a superhero movie is named after a character, that character is a good guy.\nConclusion:\nGoodGuy(surprisingAdventuresOfSirDigbyChickenCaesar) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a good guy.\n------\n>>> Initial Program:\nPredicates:"
    ]
  },
  {
    "id": "FOLIO_dev_88",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Walden contains knowledge.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "[BG] A person who is a student is a person who is in school. [BG] A person\n------"
    ]
  },
  {
    "id": "FOLIO_dev_89",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is smarter than before.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "[BG] A person who is a student is a person who is in school.\n[BG] A person who"
    ]
  },
  {
    "id": "FOLIO_dev_90",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A person who is smarter has gained knowledge.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBook(x) ::: x is a book.\nRead(x, y) :::"
    ]
  },
  {
    "id": "FOLIO_dev_91",
    "context": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Machine translation is a language generation task.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ↔ EnrolledInUniversity(x) ::: A person is"
    ]
  },
  {
    "id": "FOLIO_dev_92",
    "context": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Machine translation is a language understanding task.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ↔ EnrolledInUniversity(x) ::: A person is"
    ]
  },
  {
    "id": "FOLIO_dev_93",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nManagedBuilding(x) ::: x is a managed building.\nPet(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_94",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nManagedBuilding(x) ::: x is a managed building.\nPet(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_95",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nManagedBuilding(x) ::: x is a managed building.\nPet(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_96",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Koalas love to sleep.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAnimal(x) ::: x is an animal.\nTourist(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_97",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Koalas love to sleep and are quokka.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAnimal(x) ::: x is an animal.\nTourist(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_98",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAnimal(x) ::: x is an animal.\nTourist(x) ::: x is a tourist.\nLove(x, y) ::: x loves y.\nFavorite(x, y) ::: x is y's favorite animal.\nFrom(x, y) ::: x is from y.\nVeryFluffy(x) ::: x is very fluffy.\nSleep(x) ::: x loves to sleep.\nQuokka(x) ::: x is a quokka.\nKoala(x) ::: x is a koala.\nPremises:\n∀x (Animal(x) ∧ Tourist(x) → Love(x, x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (Animal(x) ∧ From(x, australia) → Love(x, x)) ::: All animals from Australia are loved by tourists.\n∀x (Animal(x) ∧ Quokka(x) → From(x, australia)) ::: All quokka are animals from Australia.\n∀x (Animal(x) ∧ Koala(x) → VeryFluffy(x)) ::: All koalas are very fluffy.\n∀x (Animal(x) ∧ VeryFluffy(x) → Sleep(x)) ::: All very fluffy animals love to sleep.\nConclusion:\nFavorite(Max, quokka) ::: Max's favorite animal is a quokka.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_99",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is a CEO.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\nPremises:\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Kind(x) ∨ Evil(x)) ::: A man is either kind or evil.\nGentleman(harry) ::: Harry is a gentleman.\nConclusion:\nCEO(harry) ::: Harry is a CEO.\n------\n>>> Initial Program:\nPredicates:\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\nPremises:\n∀x (Gentleman(x) → Handsome(x)) ::"
    ]
  },
  {
    "id": "FOLIO_dev_101",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\nPremises:\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Kind(x) ∨ Evil(x)) ::: A man is either kind or evil.\nHarry(gentleman) ::: Harry is a gentleman.\nConclusion:\n(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∧ Ugly(harry)) ::: Harry is either evil and ugly or not evil and not ugly.\n------\n>>> Initial Program:\nPredicates:\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a"
    ]
  },
  {
    "id": "FOLIO_dev_102",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nTwin(x) ::: x is a twin.\nTriplet(x) ::: x is a triplet.\nSibling(x, y) ::: x and y are siblings.\nSameAge(x, y) ::: x and y are the same age.\nComplain(x, y) ::: x complains often about y.\nLiveAtHome(x) ::: x lives at home regularly.\nHangOut(x, y) ::: x spends a lot of time hanging out with y.\nPlay(x, y) ::: x plays with y.\nDevelop(x, y) ::: x develops strong bonds with y.\nPremises:\n∀x (Twin(x) ∨ Triplet(x)) ∧ ∀x (Twin(x) ∨ Triplet(x)) ∧ ∀x (Twin(x) ∨ Triplet(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (Sibling(x, y) ∧ SameAge(x, y) → HangOut(x, y)) ::: If people are siblings and the same age, then they spend a lot of time hanging out with each other.\n∀x (Sibling(x, y) ∧ SameAge(x, y) → Play(x, y)) ::: If people are siblings and the same age, then they play with each other.\n∀x (S"
    ]
  },
  {
    "id": "FOLIO_dev_103",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke complains often about annoying siblings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nTwin(x) ::: x is a twin.\nTriplet(x) ::: x is a triplet.\nSibling(x, y) ::: x and y are siblings.\nSameAge(x, y) ::: x and y are the same age.\nHangOut(x, y) ::: x hangs out with y.\nPlay(x, y) ::: x plays with y.\nComplain(x, y) ::: x complains about y.\nLiveAtHome(x) ::: x lives at home regularly.\nBond(x, y) ::: x develops a strong bond with y.\nPremises:\n∀x (Twin(x) ∨ Triplet(x)) ∧ ∀x (Twin(x) ∨ Triplet(x)) ∧ ∀x (Twin(x) ∨ Triplet(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (Sibling(x, y) ∧ SameAge(x, y) → (HangOut(x, y) ∧ Play(x, y))) ::: If people are siblings and the same age, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (Sibling(x, y) ∧ SameAge(x, y) → (HangOut(x, y) ∧ Play(x, y))) ::: If people"
    ]
  },
  {
    "id": "FOLIO_dev_104",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nTwin(x) ::: x is a twin.\nTriplet(x) ::: x is a triplet.\nSibling(x, y) ::: x and y are siblings.\nSameAge(x, y) ::: x and y are the same age.\nHangOut(x, y) ::: x hangs out with y.\nPlay(x, y) ::: x plays with y.\nComplain(x, y) ::: x complains about y.\nLiveAtHome(x) ::: x lives at home regularly.\nBond(x, y) ::: x develops a strong bond with y.\nPremises:\n∀x (Twin(x) ∨ Triplet(x)) ∧ ∀x (Twin(x) ∨ Triplet(x)) ∧ ∀x (Twin(x) ∨ Triplet(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (Sibling(x, y) ∧ SameAge(x, y) → (HangOut(x, y) ∧ Play(x, y))) ::: If people are siblings and the same age, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (Sibling(x, y) ∧ SameAge(x, y) → (HangOut(x, y) ∧ Play(x, y))) ::: If people"
    ]
  },
  {
    "id": "FOLIO_dev_105",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom can apply for financial aid from ETS to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "The number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message:\n'NoneType' object has no attribute 'rstrip'\n>>> Corrected Program:\nThe number of\n------\nProblem:\nThe number of\n>>> Error Message"
    ]
  },
  {
    "id": "FOLIO_dev_107",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is no financial aid available for the GRE test.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCost(x, y) ::: x costs y.\nProvide(x, y) ::: x provides y.\nFinancialAid(x) ::: x is financial aid.\nGRETest(x) ::: x is the GRE test.\nETS(x) ::: x is ETS.\nEconomicHardship(x) ::: x is economic hardship.\nSingleParentFamily(x) ::: x is a single-parent family.\nOutOfWork(x) ::: x is out of work.\nPremises:\nCost(GRETest, 205) ::: It costs US $205 to take the GRE test.\nProvide(ETS, FinancialAid) ::: ETS provides financial aid.\nEconomicHardship(x) ∧ SingleParentFamily(x) ∧ OutOfWork(x) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nConclusion:\n¬FinancialAid(GRETest) ::: There is no financial aid available for the GRE test.\n------\n>>> Initial Program:\nPredicates:\nCost(x, y) ::: x costs y.\nProvide(x, y) ::: x provides y.\nFinancialAid(x) ::: x is financial aid.\nGRETest(x) ::: x is the GRE test.\nETS(x) ::: x is ETS.\nEconomicHardship(x) ::: x is economic hardship.\nSingleParentFamily(x) ::: x is a single-parent family."
    ]
  },
  {
    "id": "FOLIO_dev_108",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter tidies his space consistently and enjoys the process of cleaning.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nSpill(x) ::: x spills a lot of food on their clothing.\nTidy(x) ::: x tidies their space consistently.\nEnjoy(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOut(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nParent(x, y) ::: x is the parent of y.\nBusy(x) ::: x is very busy with their regular job.\nNetIncome(x) ::: x has a high net income.\nPremises:\n∀x (Spill(x) → ¬Tidy(x) ∧ Enjoy(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x)) → Spill(x) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nOnlyChild(x) → Busy(x) ::: If x grew up as an only child with no siblings, then x is very busy with their regular job.\n∀x (Parent(x, y) → NetIncome(x)) ::: All parents of y have a high net income.\nConclusion:\nEnjoy(x) ::: x enjoys the process of cleaning.\n------\n>>> Initial Program:"
    ]
  },
  {
    "id": "FOLIO_dev_109",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nSpill(x) ::: x spills a lot of food on their clothing.\nTidy(x) ::: x tidies their spaces consistently.\nEnjoy(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOut(x) ::: x goes out frequently to find new food restaurants to try.\nGrewUp(x) ::: x grew up as an only child with no siblings.\nParents(x, y) ::: x is the parent of y.\nRegularJob(x) ::: x has a regular job.\nNetIncome(x) ::: x has a high net income.\nPremises:\n∀x (Spill(x) → ¬Tidy(x) ∧ Enjoy(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x)) → Spill(x) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nGrewUp(x) → ¬Parents(x, y) ::: If x grew up as an only child with no siblings, then x is not the parent of y.\nRegularJob(x) → NetIncome(x) ::: If x has a regular job, then x has a high net income.\nConclusion:\nTidy(x) ::: x tidies their spaces consistently.\n------\n>>>"
    ]
  },
  {
    "id": "FOLIO_dev_110",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nSpill(x) ::: x spills a lot of food on their clothing.\nTidy(x) ::: x tidies their spaces consistently.\nEnjoy(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOut(x) ::: x goes out frequently to find new food restaurants to try.\nGrewUp(x) ::: x grew up as an only child with no siblings.\nHave(x) ::: x has parents who are very busy with their regular jobs.\nNetIncome(x) ::: x is a household with a high net income.\nPremises:\n∀x (Spill(x) → ¬Tidy(x) ∧ Enjoy(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x)) → Spill(x) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (GrewUp(x) → Tidy(x) ∧ Enjoy(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Have(x) → GrewUp(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (NetIncome(x) → Have(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\nPeter ∧ (Spill(peter) ∨ ¬GrewUp(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nConclusion:\nFoodie(peter) ∧ GoOut(peter) ∧ NetIncome(peter) ∨ Foodie(peter) ∧ GoOut(peter) ∧ ¬NetIncome(peter) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_112",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "SummerOlympics(x) ::: x is a Summer Olympics.\nHeld(x, y) ::: x was held in y.\nUnitedStates(x) ::: x is the United States.\nSpain(x) ::: x is Spain.\nPremises:\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, barcelona) ::: The 1992 Summer Olympics were held in Barcelona, Spain.\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, unitedStates) ::: The 1992 Summer Olympics were held in the United States.\n∀x (SummerOlympics(x) → (Held(x, unitedStates) ∨ Held(x,\nSpain))) ::: All Summer Olympics were held in the United States or Spain.\nConclusion:\nHeld(1992SummerOlympics, unitedStates) ∨ Held(1992SummerOlympics, Spain) ::: The 1992 Summer Olympics were held in the United States or Spain.\n------\nProblem:\nThe 1992 Summer Olympics were held in Barcelona, Spain. The 1992 Summer Olympics were held in the United States. The 1992 Summer Olympics were held in the United States or Spain.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The 1992 Summer Olympics were held in the United States or Spain.\n###\nPredicates:\nSummerOlympics(x) ::: x is a Summer Olympics.\nHeld(x, y) ::: x was held in y.\nUnitedStates(x) ::: x is the United States.\nSpain(x) ::: x is Spain.\nPremises:\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, barcelona) ::: The 1992 Summer Olympics were held in Barcelona, Spain.\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, unitedStates) ::: The 1992 Summer Olympics were held in the United States.\n∀x (SummerOlympics(x) → (Held(x, unitedStates) ∨ Held(x,\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nSummerO"
    ]
  },
  {
    "id": "FOLIO_dev_113",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nSummerOlympics(x) ::: x is a Summer Olympics.\nHeld(x, y) ::: x was held in y.\nCountry(x) ::: x is a country.\nEurope(x) ::: x is in Europe.\nPremises:\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, barcelona) ::: The 1992 Summer Olympics were held in Barcelona.\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, spain) ::: The 1992 Summer Olympics were held in Spain.\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, europe) ::: The 1992 Summer Olympics were held in Europe.\nSummerOlympics(1992SummerOlympics) ∧ ¬Held(1992SummerOlympics, country) ::: The 1992 Summer Olympics were held in a country that is not in Europe.\nConclusion:\nHeld(1992SummerOlympics, europe) ::: The 1992 Summer Olympics were held in Europe.\n------\nProblem:\nThe 1992 Summer Olympics were held in Barcelona. The 1992 Summer Olympics were held in Spain. The 1992 Summer Olympics were held in Europe. The 1992 Summer Olympics were held in a country that is not in Europe.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The 1992 Summer Olympics were held in a country that is in Europe.\n###\nPredicates:\nSummerOlympics(x) ::: x is a Summer Olympics.\nHeld(x, y) ::: x was held in y.\nCountry(x) ::: x is a country.\nEurope(x) ::: x is in Europe.\nPremises:\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, barcelona) ::: The 1992 Summer Olympics were held in Barcelona.\nSummerOlympics(1992SummerOlympics) ∧ Held(1992SummerOlympics, spain) ::: The 1992 Summer Olympics were held in Spain.\nSummerOlympics(1992SummerOlympics"
    ]
  },
  {
    "id": "FOLIO_dev_114",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStudent(x) ::: x is a student.\nNumber(x) ::: x is a number.\nGreaterThan(x, y) ::: x is greater than y.\nPremises:\n∀x (Student(x) → Number(x)) ::: The number of people who are not students is greater than the number of people who are students.\n∀x (Student(x) → Number(x)) ::: The number of people who are not students is greater than the number of people who are students.\nConclusion:\n∀x (Student(x) → Number(x)) ::: The number of people who are not students is greater than the number of people who are students.\n------\nProblem:\nThe number of people who are not students is greater than the number of people who are students. The number of people who are not students is greater than the number of people who are students. The number of people who are not students is greater than the number of people who are students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The number of people who are not students is greater than the number of people who are students.\n###\nPredicates:\nStudent(x) ::: x is a student.\nNumber(x) ::: x is a number.\nGreaterThan(x, y) ::: x is greater than y.\nPremises:\n∀x (Student(x) → Number(x)) ::: The number of people who are not students is greater than the number of people who are students.\n∀x (Student(x) → Number(x)) ::: The number of people who are not students is greater than the number of people who are students.\nConclusion:\n∀x (Student(x) → Number(x)) ::: The number of people who are not students is greater than the number of people who are students.\n------\nProblem:\nThe number of people who are not students is greater than the number of people who are students. The number of people who are not students is greater than the number of people who are students. The number of people who are not students is greater than the number of people who are students.\nQuestion:\nBased on the above information, is the following statement true, false, or uncertain? The number of people who are not students is greater than the number of people who are students.\n###\nPredicates:\nStudent(x) ::: x is a student.\nNumber(x) ::: x is a number.\nGreaterThan(x, y) ::: x is greater than y.\nPremises:\n∀x (Student(x) → Number(x)) ::: The number of people who are"
    ]
  },
  {
    "id": "FOLIO_dev_115",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ::: x is a student.\nPerson(x) ::: x is a person.\nConclusion:\nPerson(x) ::: x is a person.\n------\nProblem:\nIf a person is a student, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is a person. If a person is a person, then the person is"
    ]
  },
  {
    "id": "FOLIO_dev_116",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Windy is a great shooter.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\n∀x (Student(x) → ¬Teacher(x)) ::: If a person is a student, then the person is a person who is not a teacher.\n∀x (Teacher(x) → ¬Student(x)) ::: If a person is a teacher, then the person is a person who is not a student.\nConclusion:\nStudent(x) → ¬Teacher(x) ::: If a person is a student, then the person is a person who is not a teacher.\n------\nProblem:\nIf a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is"
    ]
  },
  {
    "id": "FOLIO_dev_117",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter can block Windy's shooting.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ::: x is a student.\nTeacher(x) ::: x is a teacher.\n∀x (Student(x) → ¬Teacher(x)) ::: If a person is a student, then the person is a person who is not a teacher.\n∀x (Teacher(x) → ¬Student(x)) ::: If a person is a teacher, then the person is a person who is not a student.\nConclusion:\nStudent(x) → ¬Teacher(x) ::: If a person is a student, then the person is a person who is not a teacher.\n------\nProblem:\nIf a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is not a student. If a person is a student, then the person is a person who is not a teacher. If a person is a teacher, then the person is a person who is"
    ]
  },
  {
    "id": "FOLIO_dev_122",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Greyhound is an airline.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nTruck(x) ::: x is a truck.\nPremises:\n∀x (Car(x) → Vehicle(x)) ::: If something is a car, then it is a vehicle.\n∀x (Car(x) → Vehicle(x)) ::: All cars are vehicles.\n∀x (Vehicle(x) → (Car(x) ∨ Truck(x))) ::: All vehicles are either cars or trucks.\n∀x (Truck(x) → Vehicle(x)) ::: All trucks are vehicles.\nConclusion:\nCar(car) ::: car is a car.\n------\nProblem:\nIf something is a car, then it is a vehicle. All cars are vehicles. All vehicles are either cars or trucks. All trucks are vehicles.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nTruck(x) ::: x is a truck.\nPremises:\n∀x (Car(x) → Vehicle(x)) ::: If something is a car, then it is a vehicle.\n∀x (Car(x) → Vehicle(x)) ::: All cars are vehicles.\n∀x (Vehicle(x) → (Car(x) ∨ Truck(x))) ::: All vehicles are either cars or trucks.\n∀x (Truck(x) → Vehicle(x)) ::: All trucks are vehicles.\nConclusion:\nCar(car) ::: car is a car.\n------\nProblem:\nIf something is a car, then it is a vehicle. All cars are vehicles. All vehicles are either cars or trucks. All trucks are vehicles.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPredicates:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nTruck(x) ::: x is a truck.\nPremises:\n∀x (Car(x) → Vehicle(x)) ::: If something is a car, then it is a vehicle.\n∀x (Car(x) → Vehicle(x)) ::: All cars are vehicles.\n∀x (Vehicle(x) → (Car(x) ∨ Truck(x))) ::: All vehicles are either cars or trucks.\n∀x (Truck("
    ]
  },
  {
    "id": "FOLIO_dev_123",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A Greyhound is a Boeing 707.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x) ::: If something is a car, then it is a vehicle.\n------\nProblem:\nIf something is a car, then it is a vehicle.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x) ::: If something is a car, then it is a vehicle.\n------\nProblem:\nIf something is a car, then it is a vehicle.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x) ::: If something is a car, then it is a vehicle.\n------\nProblem:\nIf something is a car, then it is a vehicle.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x) ::: If something is a car, then it is a vehicle.\n------\nProblem:\nIf something is a car, then it is a vehicle.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x) ::: If something is a car, then it is a vehicle.\n------\nProblem:\nIf something is a car, then it is a vehicle.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x) ::: If something is a car, then it is a vehicle.\n------\nProblem:\nIf something is a car, then it is a vehicle.\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPremises:\nCar(x) ::: x is a car.\nVehicle(x) ::: x is a vehicle.\nConclusion:\nCar(x) → Vehicle(x)"
    ]
  },
  {
    "id": "FOLIO_dev_124",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A Greyhound is not a Boeing 707.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nTransport(x, y) ::: x can transport y.\nEmpty(x) ::: x is empty.\nAirline(x) ::: x is an airline.\nPlane(x) ::: x is a plane.\nBoeing707(x) ::: x is a Boeing 707.\nGreyhound(x) ::: x is a Greyhound.\nPremises:\n∀x (Transport(x, y) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x, y)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬(Greyhound(greyhound) ∧ Airline(greyhound)) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nConclusion:\n¬(Greyhound(greyhound) ∧ Boeing707(greyhound)) ::: A Greyhound is not a Boeing 707.\n------\n>>> Initial Program:\nPredicates:\nMovie(x) ::: x is a movie.\nDirector(x, y) ::: x directed the movie y.\nStar(x, y) ::: x starred in the movie y.\nPremises:\n∀x (Movie(x) → ∃y (Director(x, y) ∧ Star(x, y))) ::: All movies have a director and a star.\n∀x (Director(x, y) → ¬Star(x, y)) ::: If x directed the movie y, then x did not star in the movie y.\n∀x (Star(x, y) → ¬Director(x, y)) ::: If x starred in the movie y, then x did not direct the movie y.\nConclusion:\n∃x (Movie(x) ∧ ¬Director(x, x) ∧ ¬Star(x, x)) ::: There is a movie that neither the director nor the star of the movie is the same person.\n------\n>>> Error Message:\nParsing Error\n>>> Corrected Program:"
    ]
  },
  {
    "id": "FOLIO_dev_125",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a monkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "All\n------"
    ]
  },
  {
    "id": "FOLIO_dev_127",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock does not have wings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "All mammals"
    ]
  },
  {
    "id": "FOLIO_dev_128",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has a wedding that is well-attended.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:"
    ]
  },
  {
    "id": "FOLIO_dev_129",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John does not have a wedding that is well-attended.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:"
    ]
  },
  {
    "id": "FOLIO_dev_131",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:"
    ]
  },
  {
    "id": "FOLIO_dev_132",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Platypus are mammals with no teeth.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "∀"
    ]
  },
  {
    "id": "FOLIO_dev_133",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Platypus are reptiles.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "∀"
    ]
  },
  {
    "id": "FOLIO_dev_134",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Humans are mammals.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:"
    ]
  },
  {
    "id": "FOLIO_dev_135",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Space sucks.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "A person who"
    ]
  },
  {
    "id": "FOLIO_dev_136",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Space is a vampire.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "A person who"
    ]
  },
  {
    "id": "FOLIO_dev_138",
    "context": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\nStudent(x) ::: x is a student.\nConclusion:\nStudent(x) ::: x is a student.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_139",
    "context": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nMachineLearning(x) ::: x is a Machine Learning algorithm.\nSupervised(x) ::: x is a supervised learning"
    ]
  },
  {
    "id": "FOLIO_dev_140",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is loved by children.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFunny(x) ::: x is funny.\nPopular(x) ::: x is popular.\nUgly(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_141",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is ugly or yellow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFunny(x) ::: x is funny.\nPopular(x) ::: x is popular.\nUgly(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_142",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is either yellow and ugly or neither yellow nor ugly.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nFunny(x) ::: x is funny.\nPopular(x) ::: x is popular.\nUgly(x) ::"
    ]
  },
  {
    "id": "FOLIO_dev_143",
    "context": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Heck cattle are artificially selected.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBreedingBack(x) ::: x is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHe"
    ]
  },
  {
    "id": "FOLIO_dev_144",
    "context": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Aurochs are extinct.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "A person who is a member of the Communist Party of the Soviet Union is a communist. A person who is a member of the Communist Party of the Soviet Union is"
    ]
  },
  {
    "id": "FOLIO_dev_145",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jerry is young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Study"
    ]
  },
  {
    "id": "FOLIO_dev_146",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jerry is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nHuman(x) ::: x is a human.\nStudent(x) ::: x is a student.\nStudy(x)"
    ]
  },
  {
    "id": "FOLIO_dev_147",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rose is a human or a manager.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Premises:\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies"
    ]
  },
  {
    "id": "FOLIO_dev_148",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rose is a human or Jerry is a manager.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nHuman(x) ::: x is a human.\nStudent(x) ::: x is a student.\nStudies(x) ::: x studies.\nTeach(x) ::: x teaches.\nYoung(x) ::: x is young.\nManager(x) ::: x is a manager.\nPremises:\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ∨ Teach(x)) ::: A person either studys or teaches.\n∀x (Young(x) → ¬Teach(x)) ::: No young person teaches.\nJerry ∧ ¬(Studies(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nRose ∨ Student(rose) ::: Rose is young or a student.\nConclusion:\nHuman(jerry) ∨ Manager(rose) ::: Rose is a human or Jerry is a manager.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_149",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? It is not true that Rose is a student and Jerry is a human.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "All people who are not students are either managers or teachers. All people who are not managers\n------\nProblem:\nAll people who are not students are either managers or teachers. All people who are not managers\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are not students are either managers or teachers. All people who are not managers\n------\nProblem:\nAll people who are not students are either managers or teachers. All people who are not managers\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are not students are either managers or teachers. All people who are not managers\n------\nProblem:\nAll people who are not students are either managers or teachers. All people who are not managers\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are not students are either managers or teachers. All people who are not managers\n------\nProblem:\nAll people who are not students are either managers or teachers. All people who are not managers\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nAll people who are not students are either managers or teachers. All people who are not managers\n------\nProblem:\nAll people who are not students are either"
    ]
  },
  {
    "id": "FOLIO_dev_151",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPublish(x, y) ::: x is published in language y.\nTranslate(x, y, z) ::: x is translated from language y into language z.\nBook(x) ::: x is a book.\nPremises:\n∀x (Publish(x, english) ∧ Book(x)) ::: All of New Vessel Press's published books are in English.\nNewVesselPress(x) ∧ Publish(x, neapolitanChronicles) ∧ Translate(neapolitanChronicles, italian, english) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nNewVesselPress(x) ∧ Publish(x, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.\nConclusion:\nPublish(newVesselPress, harryPotter) ::: Harry Pot\n------\n>>> Initial Program:\nPredicates:\nBorn(x, y) ::: x was born in y.\nLive(x, y) ::: x lives in y.\nPremises:\n∀"
    ]
  },
  {
    "id": "FOLIO_dev_153",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Remy visits the office supply store regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nOwn(x, y) ::: x owns y.\nWork(x, y) ::: x works regularly and often at y.\nHave(x, y) ::: x has y.\nFullyStocked(x) ::: x is a fully stocked and impressive home office.\nLargeDesktopMonitor(x) ::: x is a large desktop monitor.\nVisit(x, y) ::: x visits y.\nOfficeSupplyStore(y) ::: y is an office supply store.\nGoToBed(x, y) ::: x goes to bed at y.\nWakeUp(x, y) ::: x wakes up at y.\nSpend(x, y) ::: x spends their free time doing y.\nPremises:\n∀x (Own(x, largeDesktopMonitor) → Work(x, home)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (Have(x, largeDesktopMonitor) → Work(x, home)) ::: If people have a large desktop monitor at their home, then they work regularly and often at home.\n∀x (Work("
    ]
  },
  {
    "id": "FOLIO_dev_154",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "∀x (Own(x, largeDesktopMonitor) → Work(x)) ::: If people own a large desktop monitor at their home, then\n------\n>>> Initial Program:\nPredicates:\nOwn(x, y) ::: x owns y.\nWork(x) ::: x works regularly and often at home.\nHave(x, y) ::: x has y.\nStock(x) ::: x is fully stocked.\nImpressive(x) ::: x is impressive.\nTidy(x) ::: x tidies.\nOrganize(x) ::: x organizes.\nSpaces(x) ::: x is a space.\nGoToBed(x) ::: x goes to bed.\nWakeUp(x) ::: x wakes up.\nFreeTime(x) ::: x spends their free time.\nVisit(x, y) ::: x visits y.\nOfficeSupplyStore(y) ::: y is an office supply store.\nPremises:\n∀x (Own(x, largeDesktopMonitor) → Work(x)) ::: If people own a large desktop monitor at their home, then\n∀x (Work(x"
    ]
  },
  {
    "id": "FOLIO_dev_155",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nOwn(x, y) ::: x owns y.\nWork(x, y) ::: x works regularly and often at y.\nHave(x, y) ::: x has y.\nSpent(x, y) ::: x spends their free time doing y.\nVisit(x, y) ::: x visits y regularly.\nGo(x, y) ::: x goes to y.\nBed(x) ::: x goes to bed.\nWake(x, y) ::: x wakes up at y.\nPremises:\n∀x (Own(x, largeDesktopMonitor) → Work(x, home)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (Have(x, fullyStockedAndImpressiveHomeOffice) → Own(x, largeDesktopMonitor)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor.\n∀x (Work(x, home) → Own(x, largeDesktopMonitor)) ::: All people who work regularly and often at home are people who own a large desktop monitor.\n∀"
    ]
  },
  {
    "id": "FOLIO_dev_157",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has a part-time job offered by the university.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStudent(x) ::: x is a student.\nWork(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nPartTimeJob(x) ::: x is a part-time job.\nOffered(x, y) ::: x is offered by y.\nUniversity(x) ::: x is a university.\nDatabase(x) ::: x is the database course.\nInstructed(x, y) ::: x is instructed by y.\nProfessor(x) ::: x is a professor.\nDavid(x) ::: x is professor David.\nLab(x) ::: x is a lab.\nPremises:\n¬∃x (Student(x) ∧ Work(x, library) ∧ From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) → ¬(Work(x, library) ∧ From(x, computerScience))) ::: All students do not work in the library and are from the computer science department.\n∀x (Student"
    ]
  },
  {
    "id": "FOLIO_dev_158",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStudent(x) ::: x is a student.\nWork(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nPartTimeJob(x) ::: x is a part-time job.\nOffered(x, y) ::: x is offered by y.\nUniversity(x) ::: x is a university.\nDatabase(x) ::: x is the database course.\nInstructed(x, y) ::: x is instructed by y.\nProfessor(x) ::: x is a professor.\nDavid(x) ::: x is professor David.\nLab(x) ::: x is a lab.\nPremises:\n¬∃x (Student(x) ∧ Work(x, library) ∧ From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) → ¬(Work(x, library) ∧ From(x, computerScience))) ::: All students do not work in the library and are from the computer science department.\n∀x (Student"
    ]
  },
  {
    "id": "FOLIO_dev_159",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nStudent(x) ::: x is a student.\nWork(x, y) ::: x works in y.\nFrom(x, y) ::: x is from y.\nPartTimeJob(x) ::: x has a part-time job.\nOffered(x, y) ::: x is offered by y.\nUniversity(x) ::: x is a university.\nDatabase(x) ::: x is the database course.\nInstructed(x, y) ::: x is instructed by y.\nProfessor(x) ::: x is a professor.\nDavid(x) ::: x is professor David.\nLab(x) ::: x is a lab.\nPremises:\n¬∃x (Student(x) ∧ Work(x, library) ∧ From(x, computerScience)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) → ¬Work(x, library)) ::: All students do not work in the library.\n∀x (Student(x) → ¬From(x, computerScience)) ::: All students are not"
    ]
  },
  {
    "id": "FOLIO_dev_170",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Colorectal cancer is a severe cancer",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDeadly(x) ::: x is a deadly disease.\nSurvivalRate(x) ::: x has a low survival rate.\nSevere(x) ::: x is a severe cancer.\nBileDuct(x) ::: x is bile duct cancer.\nCholangiocarcinoma(x) ::: x is Cholangiocarcinoma.\nMild(x) ::: x is mild flu.\nPremises:\n∀x (Deadly(x) → SurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (Severe(x) → Deadly(x)) ::: All severe cancers are deadly diseases.\nBileDuct(bileDuctCancer) ∧ Severe(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuct(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬∀x (Mild(x) → ¬SurvivalRate(x))"
    ]
  },
  {
    "id": "FOLIO_dev_171",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDeadly(x) ::: x is a deadly disease.\nSurvivalRate(x) ::: x has a low survival rate.\nSevere(x) ::: x is a severe cancer.\nBileDuct(x) ::: x is a bile duct cancer.\nCholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.\nPremises:\n∀x (Deadly(x) → SurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (Severe(x) → Deadly(x)) ::: All severe cancers are deadly diseases.\nBileDuct(bileDuctCancer) ∧ Cholangiocarcinoma(bileDuctCancer) ::: Bile duct cancer is a bile duct cancer.\n∀x (Cholangiocarcinoma(x) → BileDuct(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬∀x (MildFlu(x) → SurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n∀x (ColorectalCancer(x) → BileDuct(x)) ∧ SurvivalRate(x) → ¬(ColorectalCancer(x) ∧ BileDuct(x)) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nConclusion:\n(ColorectalCancer(x) ∧ BileDuct(x)) ∨\n------"
    ]
  },
  {
    "id": "FOLIO_dev_172",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nDeadly(x) ::: x is a deadly disease.\nSurvivalRate(x) ::: x has a low survival rate.\nSevere(x) ::: x is a severe cancer.\nBileDuct(x) ::: x is a bile duct cancer.\nCholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.\nPremises:\n∀x (Deadly(x) → SurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (Severe(x) → Deadly(x)) ::: All severe cancers are deadly diseases.\nBileDuct(bileDuctCancer) ∧ Cholangiocarcinoma(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuct(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬∀x (MildFlu(x) → SurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n∀x (ColorectalCancer(x) ∧ SurvivalRate(x) → ¬(BileDuct(x) ∧ Cholangiocarcinoma(x))) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nConclusion:\n∀x (ColorectalCancer(x) ∧ ¬MildFlu(x) ∧ ¬Cholangioc"
    ]
  },
  {
    "id": "FOLIO_dev_173",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor eats salads regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEatSalad(x) ::: x eats salads regularly.\nHealthConscious(x) ::: x is very conscious about their health and eating habits.\nGrewUp(x, y) ::: x grew up in childhood home y.\nNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.\nGoodRelationship(x, y) ::: x has a good relationship with y.\nVisitGym(x) ::: x visits the gym at least once a day.\nPremises:\n∀x (EatSalad(x) → HealthConscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (EatSalad(x) ∧ GrewUp(x, y)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (NutritionalIntake(x) ∧ GrewUp(x, y)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (GoodRelationship(x, y) → NutritionalIntake(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (GoodRelationship(x, y) → ¬EatSalad(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (VisitGym(x) → NutritionalIntake(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nGrewUp(taylor, healthConscious) ::: Taylor"
    ]
  },
  {
    "id": "FOLIO_dev_174",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor visits the gym at least once a day.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEatSalad(x) ::: x eats salads regularly.\nHealthConscious(x) ::: x is very conscious about his/her health and eating habits.\nGrewUp(x, y) ::: x grew up in y.\nNutritionalIntake(x) ::: x fulfills his/her nutritional daily intakes.\nGoodRelationship(x, y) ::: x has a good relationship with y.\nVisitGym(x) ::: x visits the gym at least once a day.\nPremises:\n∀x (EatSalad(x) → HealthConscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (EatSalad(x) ∧ GrewUp(x, y)) → HealthConscious(y) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (NutritionalIntake(x) → GrewUp(x, y)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (GoodRelationship(x, y) → NutritionalIntake(y)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (GoodRelationship(x, y) → ¬EatSalad(y)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (VisitGym(x) → NutritionalIntake(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUp(taylor,"
    ]
  },
  {
    "id": "FOLIO_dev_175",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nEatSalad(x) ::: x eats salads regularly.\nHealthConscious(x) ::: x is very conscious about his/her health and eating habits.\nGrewUp(x, y) ::: x grew up in y.\nNutritionalIntake(x) ::: x fulfills his/her nutritional daily intakes.\nGoodRelationship(x, y) ::: x has a good relationship with y.\nVisitGym(x) ::: x visits the gym at least once a day.\nPremises:\n∀x (EatSalad(x) → HealthConscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (EatSalad(x) ∧ GrewUp(x, y)) → HealthConscious(y) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (NutritionalIntake(x) → GrewUp(x, y)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (GoodRelationship(x, y) → NutritionalIntake(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (GoodRelationship(x, y) → ¬EatSalad(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (VisitGym(x) → NutritionalIntake(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUp(taylor,"
    ]
  },
  {
    "id": "FOLIO_dev_176",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The world championships is a sporting event.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "OlympicGames(x) ::: x is the Olympic games.\nSportingEvent(x) ::: x is a sporting event.\nLast(x, y) ::: x is the last x.\nUnitedStates(x) ::: x is the United States.\nWin(x, y) ::: x won y.\nMedal(x) ::: x is a medal.\nMost(x, y) ::: x won the most y.\nPremises:\nOlympicGames(tokyo) ::: The Olympic games is a sporting event.\nLast(olympicGames, tokyo) ::: The last Olympic games was in Tokyo.\nUnitedStates(us) ∧ Win(us, mostMedals) ::: The United States won the most medals in Tokyo.\nConclusion:\nSportingEvent(worldChampionships) ::: The world championships is a sporting event.\n------\n>>> Initial Program:\nPredicates:\nOlympicGames(x) ::: x is the Olympic games.\nSportingEvent(x) ::: x is a sporting event.\nLast(x, y) ::: x is the last x.\nUnitedStates(x) ::: x is the United States.\nWin(x, y) ::: x won y.\nMedal(x) ::: x is a medal.\nMost(x, y) ::: x won the most y.\nPremises:\nOlympicGames(tokyo) ::: The Olympic games is a sporting event.\nLast(olympicGames, tokyo) ::: The last Olympic games was in Tokyo.\nUnitedStates(us) ∧ Win(us, mostMedals) ::: The United States won the most medals in Tokyo."
    ]
  },
  {
    "id": "FOLIO_dev_177",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The last Olympic games were not in Tokyo.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nOlympicGames(x) ::: x is an Olympic games.\nSportingEvent(x) ::: x is a sporting event.\nLast(x, y) ::: x is the last x.\nIn(x, y) ::: x is in y.\nUnitedStates(x) ::: x is the United States.\nWin(x, y) ::: x won y.\nMedal(x) ::: x is a medal.\nMost(x, y) ::: x won the most y.\nPremises:\nOlympicGames(last) ∧ In(last, Tokyo) ::: The last Olympic games was in Tokyo.\nOlympicGames(last) ∧ SportingEvent(last) ::: The last Olympic games is a sporting event.\nUnitedStates(us) ∧ Win(us, most) ∧ Most(medal, us) ::: The United States won the most medals in Tokyo.\nConclusion:\n¬Last(last, Tokyo) ::: The last Olympic games were not in Tokyo.\n------\n>>> Initial Program:\nPredicates:\nOlympicGames(x) ::: x is an Olympic games.\nSportingEvent(x) ::: x is a sporting event.\nLast(x, y) ::: x is the last x.\nIn(x, y) ::: x is in y.\nUnitedStates(x) ::: x is the United States.\nWin(x, y) ::: x won y.\nMedal(x) ::: x is a medal.\nMost(x, y) ::: x won the most y.\nPremises:\nOlympicGames(last) ∧ In(last, Tokyo) ::: The last Olympic"
    ]
  },
  {
    "id": "FOLIO_dev_182",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is a grumpy person.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice to animals.\nMean(x) ::: x is mean to animals.\nGrumpy(x) ::: x is a grumpy person.\nAnimalLover(x) ::: x is an animal lover.\nOwn(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPremises:\n∀x (Nice(x) → ¬Mean(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ Mean(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → Nice(x)) :::\nConclusion:\n∀x (AnimalLover(x) → ¬Mean(x)) ::: All animal lovers are not mean to animals.\n------\n>>> Initial Program:\nPredicates:\nNice(x) ::: x is nice to animals.\nMean(x) ::: x is mean to animals.\nGrumpy(x) ::: x is a grumpy person.\nAnimalLover(x) ::: x is an animal lover.\nOwn(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPremises:\n∀x (Nice(x) → ¬Mean(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ Mean(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → Nice(x)) :::\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPred"
    ]
  },
  {
    "id": "FOLIO_dev_183",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is not a grumpy person and mean to animals.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice to animals.\nMean(x) ::: x is mean to animals.\nGrumpy(x) ::: x is a grumpy person.\nAnimalLover(x) ::: x is an animal lover.\nOwn(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPremises:\n∀x (Nice(x) → ¬Mean(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ Mean(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → Nice(x)) :::\nConclusion:\n∀x (AnimalLover(x) → ¬Mean(x)) ::: All animal lovers are not mean to animals.\n------\n>>> Initial Program:\nPredicates:\nNice(x) ::: x is nice to animals.\nMean(x) ::: x is mean to animals.\nGrumpy(x) ::: x is a grumpy person.\nAnimalLover(x) ::: x is an animal lover.\nOwn(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPremises:\n∀x (Nice(x) → ¬Mean(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ Mean(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → Nice(x)) :::\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPred"
    ]
  },
  {
    "id": "FOLIO_dev_184",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice to animals.\nMean(x) ::: x is mean to animals.\nGrumpy(x) ::: x is a grumpy person.\nAnimalLover(x) ::: x is an animal lover.\nOwn(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPremises:\n∀x (Nice(x) → ¬Mean(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ Mean(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → Nice(x)) :::\nConclusion:\n∀x (AnimalLover(x) → ¬Mean(x)) ::: All animal lovers are not mean to animals.\n------\n>>> Initial Program:\nPredicates:\nNice(x) ::: x is nice to animals.\nMean(x) ::: x is mean to animals.\nGrumpy(x) ::: x is a grumpy person.\nAnimalLover(x) ::: x is an animal lover.\nOwn(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPremises:\n∀x (Nice(x) → ¬Mean(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ Mean(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → Nice(x)) :::\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nPred"
    ]
  },
  {
    "id": "FOLIO_dev_185",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dani Shapiro is a novel writer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPodcast(x) ::: x is a podcast.\nNovel(x) ::: x is a novel.\nAmerican(x) ::: x is an American.\nBornIn(x, y) ::: x is born in city y.\nWrittenBy(x, y) ::: x is written by person y.\nCreated(x, y) ::: x is created by person y.\nPremises:\n¬Podcast(novel) ::: A podcast is not a novel.\n∀x (BornIn(x, americanCity) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → Created(x, y)) ::: If a novel is written by a person, then the novel is created by the person.\n∀x ∀y (Podcast(x) ∧ Created(x, y) → WrittenBy(x, y)) ::: If a podcast is created by a person, then the podcast is written by the person.\n∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → BornIn(y, americanCity)) ::: If a novel is written by a person, then the person is born in American City.\n∀x ∀y (Podcast(x) ∧ Created(x, y) → BornIn(y, americanCity)) ::: If a podcast is created by a person, then the person is born in American City.\nConclusion:\nNovel(novel) ::: novel is a novel.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_186",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Family Secrets is a novel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nPodcast(x) ::: x is a podcast.\nNovel(x) ::: x is a novel.\nAmerican(x) ::: x is an American.\nBornIn(x, y) ::: x is born in city y.\nWrittenBy(x, y) ::: x is written by person y.\nCreated(x, y) ::: x is created by person y.\nPremises:\n¬Podcast(familyHistory) ::: A podcast is not a novel.\n∀x (BornIn(x, americanCity) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → Created(y, x)) ::: If a novel is written by a person, then the person created the novel.\n∀x ∀y (Podcast(x) ∧ WrittenBy(x, y) → Created(y, x)) ::: If a podcast is written by a person, then the person created the podcast.\n∀x ∀y (Novel(x) ∧ Created(x, y) → WrittenBy(y, x)) ::: If a novel is created by a person, then the person wrote the novel.\n∀x ∀y (Podcast(x) ∧ Created(x, y) → WrittenBy(y, x)) ::: If a podcast is created by a person, then the person wrote the podcast.\nConclusion:\nWrittenBy(john, familyHistory) ::: John wrote the family history.\n------\n>>> Initial Program:"
    ]
  },
  {
    "id": "FOLIO_dev_187",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dani Shapiro was born in Boston.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nNovel(x) ::: x is a novel.\nPodcast(x) ::: x is a podcast.\nBornIn(x, y) ::: x is born in y.\nAmerican(x) ::: x is an American.\nPerson(x) ::: x is a person.\nNovelWriter(x) ::: x is a novel writer.\nWrite(x, y) ::: x writes y.\nBook(x) ::: x is a book.\nPublish(x, y) ::: x is published in year y.\nCreated(x, y) ::: x created y.\nPremises:\nPodcast(familySecrets) ∧ BornIn(dani, americanCity) ∧ American(dani) ∧ Person(dani) ∧ NovelWriter(dani) ∧ Write(dani, familySecrets) ∧ Book(familySecrets) ∧ Publish(familySecrets, 2019) ∧ Created(dani, familySecrets)\nConclusion:\nNovel(familySecrets) ::: familySecrets is a novel.\n------\n>>> Initial Program:\nPredicates:\nNovel(x) ::: x is a novel.\nPodcast(x) ::: x is a podcast.\nBornIn(x, y) ::: x is born in y.\nAmerican(x) ::: x is an American.\nPerson(x) ::: x is a person.\nNovelWriter(x) ::: x is a novel writer.\nWrite(x, y) ::: x writes y.\nBook(x) ::: x is a book.\nPublish(x,"
    ]
  },
  {
    "id": "FOLIO_dev_188",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is an American.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAmerican(x) ::: x is an American.\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x, large) → Large(x)) ::: If someone wears large shoes, they are large.\nConclusion:\nAmerican(x) ∧ ¬BasketballPlayer(x) ::: x is an American and not a basketball player.\n------\n>>> Initial Program:\nPredicates:\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x"
    ]
  },
  {
    "id": "FOLIO_dev_189",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is not an American basketball player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAmerican(x) ::: x is an American.\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x, large) → Large(x)) ::: If someone wears large shoes, they are large.\nConclusion:\nAmerican(x) ∧ ¬BasketballPlayer(x) ::: x is an American and not a basketball player.\n------\n>>> Initial Program:\nPredicates:\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x"
    ]
  },
  {
    "id": "FOLIO_dev_191",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAmerican(x) ::: x is an American.\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x, large) → Wear(x, largeSize)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬Wear(yuri, largeSize) ::: Yuri does not wear large-size clothes.\nConclusion:\n(¬Wear(yuri, large) → BasketballPlayer(yuri)) ::: If Yuri does not wear large shoes, then Yuri is a basketball player.\n------\n>>> Initial Program:\nPredicates:\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.���"
    ]
  },
  {
    "id": "FOLIO_dev_192",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAmerican(x) ::: x is an American.\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → Wear(x, large)) ::: If someone is tall, they wear large shoes.\n∀x (Wear(x, large) → Wear(x, largeSize)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬Wear(yuri, largeSize) ::: Yuri does not wear large-size clothes.\nConclusion:\n¬(BasketballPlayer(yuri) ∧ ¬American(yuri)) ::: Yuri is not a basketball player and is not American.\n------\n>>> Initial Program:\nPredicates:\nBasketballPlayer(x) ::: x is a basketball player.\nTall(x) ::: x is tall.\nWear(x, y) ::: x wears y.\nLarge(x) ::: x is large.\nPremises:\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x"
    ]
  },
  {
    "id": "FOLIO_dev_194",
    "context": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nWinner(x) ::: x is the winner of the 1992 du Maurier Classic.\nParticipate(x) ::: x participated in the 1992 du Maurier Classic.\nLeaderboard(x) ::: x is on the leaderboard of the 1992 du Maurier Classic.\nFrom(x, y) ::: x is from country y.\nPremises:\nWinner(steinhauer) ∧ Participate(steinhauer) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nParticipate(steinhauer) ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x ∃y (∃z (∃w (∃u (∃t (∃s (∃r (∃q (∃p (∃o (∃n (∃m (∃l (∃k (∃j (∃i (∃h (∃g (∃f (∃e (∃d (∃c (∃b (∃a (∃z (∃y (∃x (∃w (∃v (∃u (∃t (∃s (∃r (∃q (∃p (∃o (∃n (∃m (∃l (∃k (∃j (∃i (∃h (∃g (∃f (∃"
    ]
  },
  {
    "id": "FOLIO_dev_195",
    "context": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nWinner(x) ::: x is the winner of the 1992 du Maurier Classic.\nParticipate(x) ::: x participated in the 1992 du Maurier Classic.\nLeaderboard(x) ::: x is on the leaderboard of the 1992 du Maurier Classic.\nTie(x) ::: x is a tie.\nSixWay(x) ::: x is a six-way tie.\nBelgian(x) ::: x is from Belgium.\nPremises:\nWinner(steinhauer) ∧ Participate(steinhauer) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nParticipate(steinhauer) ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (Tie(x) ∧ SixWay(x)) ::: There was one six-way tie on the leaderboard.\n∃x (Belgian(x) ∧ Leaderboard(x)) ::: There was at least one Belgian on the leaderboard.\nConclusion:\nWinner(steinhauer) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\n------\n>>> Initial Program:\nPredicates:\nWinner(x) ::: x is the winner of the 1992 du Maurier Classic.\nParticipate(x) ::: x participated in the 1992 du Maurier Classic.\nLeaderboard(x) ::: x is on the leaderboard of the 1992 du Maurier Classic.\nTie(x) ::: x is a tie.\nSixW"
    ]
  },
  {
    "id": "FOLIO_dev_196",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi is terricolous.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAnimal(x) ::: x is an animal.\nBark(x) ::: x barks.\nJump(x) ::: x jumps.\nLegs(x) ::: x has legs.\nTerricolous(x) ::: x is terricolous.\nPremises:\n∀x (Animal(x) → (Bark(x) → ¬JaneLikes(x))) ::: If an animal barks, then Jane does not like it.\n∀x (Animal(x) → (Jump(x) → JaneLikes(x))) ::: If an animal jumps, then Jane likes it.\n∀x (Animal(x) → (Legs(x) → Jump(x))) ::: If an animal has legs, then it jumps.\n∀x (Animal(x) → (Terricolous(x) → Legs(x))) ::: If an animal is terricolous, then it has legs.\n∀x (Dog(x) → (Animal(x) ∧ Bark(x))) ::: If x is a dog, then x is an animal and barks.\nConclusion:\nJaneLikes(dog) ::: Jane likes dog.\n------\n>>> Initial Program:\nPredicates:\nAnimal(x) ::: x is an animal.\nBark(x) ::: x barks.\nJump(x) ::: x jumps.\nLegs(x) ::: x has legs.\nTerricolous(x) ::: x is terricolous.\nPremises:\n∀x (Animal(x) → (Bark(x) → ¬Jane"
    ]
  },
  {
    "id": "FOLIO_dev_197",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi barks and is a dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAnimal(x) ::: x is an animal.\nBark(x) ::: x barks.\nJump(x) ::: x jumps.\nLeg(x) ::: x has legs.\nTerricolous(x) ::: x is terricolous.\nPremises:\n∀x (Animal(x) → (Bark(x) → ¬JaneLikes(x))) ::: If an animal barks, then Jane does not like it.\n∀x (Dog(x) → (Animal(x) ∧ Bark(x))) ::: All dogs are animals that bark.\n∀x (Animal(x) → (Jump(x) → JaneLikes(x))) ::: If an animal jumps, then Jane likes it.\n∀x (Animal(x) → (Leg(x) → Jump(x))) ::: If an animal has legs, then it jumps.\n∀x (Terricolous(x) → Leg(x)) ::: If an animal is terricolous, then it has legs.\nConclusion:\nJaneLikes(dog) ::: Jane likes dog.\n------"
    ]
  },
  {
    "id": "FOLIO_dev_198",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi neither barks nor is a dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nAnimal(x) ::: x is an animal.\nBark(x) ::: x barks.\nJump(x) ::: x jumps.\nLeg(x) ::: x has legs.\nTerricolous(x) ::: x is terricolous.\nLike(jane, x) ::: Jane likes x.\nPremises:\n∀x (Animal(x) → (Bark(x) → ¬Like(jane, x))) ::: If an animal barks, then Jane does not like it.\n∀x (Dog(x) → (Animal(x) ∧ Bark(x))) ::: All dogs are animals that bark.\n∀x (Animal(x) → (Jump(x) → Like(jane, x))) ::: If an animal jumps, then Jane likes it.\n∀x (Animal(x) → (Leg(x) → Jump(x))) ::: If an animal has legs, then it jumps.\n∀x (Terricolous(x) → (Animal(x) ∧ Leg(x))) ::: If an animal is terricolous,"
    ]
  },
  {
    "id": "FOLIO_dev_199",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one playing for Nautico is Brazilian.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBorn(x, y) ::: x was born in year y.\nCommonlyKnownAs(x, y) ::: x is commonly known as y.\nLoanedOut(x, y) ::: x is loaned out to y.\nFootballPlayer(x) ::: x is a football player.\nBrazillian(x) ::: x is a Brazillian footballer.\nFootballClub(x) ::: x is a football club.\nPremises:\nBorn(aliton, year1995) ∧ CommonlyKnownAs(aliton, aliton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(aliton) ∧ LoanedOut(aliton, braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(aliton) ∧ Brazillian(aliton) ∧ FootballClub(nautico) ::: Ailton Silva\nConclusion:\nBorn(aliton, year1995) ∧ CommonlyKnownAs(aliton"
    ]
  },
  {
    "id": "FOLIO_dev_202",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva played for Fluminense.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "A person is a student if and only if the person\n------\nProblem:\nA person is a student if and only if the person\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nA person is a student if and only if the person\n------\nProblem:\nA person is a student if and only if the person\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nA person is a student if and only if the person\n------\nProblem:\nA person is a student if and only if the person\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nA person is a student if and only if the person\n------\nProblem:\nA person is a student if and only if the person\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nA person is a student if and only if the person\n------\nProblem:\nA person is a student if and only if the person\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nA person is a student if and only if the person\n------\nProblem:\nA person is a student if and only if the person\n>>> Error Message:\nParsing Error\n>>> Corrected Program:\nA"
    ]
  },
  {
    "id": "FOLIO_dev_203",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Predicates:\nBorn(x, y) ::: x was born in year y.\nCommonlyKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOut(x, y) ::: x was loaned out to y.\nBrazillian(x) ::: x is a Brazillian footballer.\nFootballClub(x) ::: x is a football club.\nPremises:\nBorn(aliton, year1995) ∧ CommonlyKnownAs(aliton, aliton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(aliton) ∧ LoanedOut(aliton, braga) ::: Ailton is a football player who was loaned out to Braga.\nBrazillian(aliton) ∧ FootballClub(nautico) ∧ FootballClub(braga) ∧ FootballClub(fluminense) ::: Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a"
    ]
  }
]