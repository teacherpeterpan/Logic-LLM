[
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cstdint>\n#include <cstdio>\n#include <cstddef>\n#include <cstdbool>\n#include <cstring>\n#include <cstdlib>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdint>\n#include <cstdbool>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#"
    ]
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cstdint>\n#include <cstdio>\n#include <cstddef>\n#include <cstdarg>\n#include <cstring>\n#include <cstdlib>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#"
    ]
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\n// Define a struct to represent a person\nstruct Person {\n    string name;\n    int age;\n};\n\n// Define a function to print a person's information\nvoid printPerson(Person p) {\n    cout << \"Name: \" << p.name << endl;\n    cout << \"Age: \" << p.age << endl;\n}\n\n// Define a function to check if two people have the same name\nbool haveSameName(Person p1, Person p2) {\n    return p1.name == p2.name;\n}\n\n// Define a function to check if two people have the same age\nbool haveSameAge(Person p1, Person p2) {\n    return p1.age == p2.age;\n}\n\n// Define a function to check if two people have the same information\nbool haveSameInfo(Person p1, Person p2) {\n    return haveSameName(p1, p2) && haveSameAge(p1, p2);\n}\n\n// Define a function to find the person with the highest age\nPerson findHighestAge() {\n    vector<Person> people = {\n        {\"Wren\", 25},\n        {\"Eve\", 30},\n        {\"Adam\", 35},\n        {\"Bob\", 40}\n    };\n\n    sort(people.begin(), people.end(), [](const Person& p1, const Person& p2) {\n        return p1.age > p2.age;\n    });\n\n    return people[0];\n}\n\nint main() {\n    // Define a vector of people\n    vector<Person> people = {\n        {\"Wren\", 25},\n        {\"Eve\", 30},\n        {\"Adam\", 35},\n        {\"Bob\", 40}\n    };\n\n    // Define a query to find the person with the highest age\n    Person highestAge = findHighestAge();\n\n    // Print the person with the highest age\n    printPerson(highestAge);\n\n    // Define a query to find the two people with the same name and age\n    vector<Person> sameNameAndAge = findPeopleWithSameNameAndAge(people);\n\n    // Print the two people with the same name and age\n    for (const auto& person : sameNameAndAge) {\n        printPerson(person);\n    }\n\n    // Define a query to find the two people with the same name but different age\n    vector<Person> sameNameButDifferentAge = findPeopleWithSameNameButDifferentAge(people);\n\n    // Print the two people with the same name but different age\n    for (const auto& person : sameNameButDifferentAge) {\n        printPerson(person);\n    }\n\n    return 0;\n}\n\n// Define a function to find the two people with the same name and age\nvector<Person> findPeopleWithSameNameAndAge(vector<Person> people) {\n    // Use a map to keep track of the people with the same name and age\n    unordered_map<string, vector<Person>> nameAndAgeMap;\n\n    for (const auto& person : people) {\n        // Check if the person's name and age are already in the map\n        if (nameAndAgeMap.count(person.name) == 0) {\n            // If the person's name and age are not in the map, add them to the map\n            nameAndAgeMap[person.name].push_back(person);\n        } else {\n            // If the person's name and age are already in the map, check if they have the same age\n            if (person.age == nameAndAgeMap[person.name][0].age) {\n                // If they have the same age, add them to the list of people with the same name and age\n                nameAndAgeMap[person.name].push_back(person);\n            }\n        }\n    }\n\n    // Return the list of people with the same name and age\n    return nameAndAgeMap[people[0].name];\n}\n\n// Define a function to find the two people with the same name but different age\nvector<Person> findPeopleWithSameNameButDifferentAge(vector<Person> people) {"
    ]
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cstdint>\n#include <cstdio>\n#include <cstddef>\n#include <cstdarg>\n#include <cstring>\n#include <cstdlib>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#"
    ]
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cstdint>\n#include <cstdio>\n#include <cstddef>\n#include <cstdarg>\n#include <cstring>\n#include <cstdlib>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdtype>\n#include <cstdbool>\n#"
    ]
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "# Problem 1:\n\nYou have a list of numbers and you want to find the first number that is greater than a given number. How would you do it?\n\n# Problem 2:\n\nYou have a list of numbers and you want to find the first number that is less than a given number. How would you do it?\n\n# Problem 3:\n\nYou have a list of numbers and you want to find the first number that is equal to a given number. How would you do it?\n\n# Problem 4:\n\nYou have a list of numbers and you want to find the first number that is not equal to a given number. How would you do it?\n\n# Problem 5:\n\nYou have a list of numbers and you want to find the first number that is not in the list. How would you do it?\n\n# Problem 6:\n\nYou have a list of numbers and you want to find the first number that appears more than once in the list. How would you do it?\n\n# Problem 7:\n\nYou have a list of numbers and you want to find the first number that appears only once in the list. How would you do it?\n\n# Problem 8:\n\nYou have a list of numbers and you want to find the first number that is a multiple of a given number. How would you do it?\n\n# Problem 9:\n\nYou have a list of numbers and you want to find the first number that is not a multiple of a given number. How would you do it?\n\n# Problem 10:\n\nYou have a list of numbers and you want to find the first number that is in the list, but not in the original list. How would you do it?\n\n# Problem 11:\n\nYou have a list of numbers and you want to find the first number that is not in the list, but is in the original list. How would you do it?\n\n# Problem 12:\n\nYou have a list of numbers and you want to find the first number that is the sum of two given numbers. How would you do it?\n\n# Problem 13:\n\nYou have a list of numbers and you want to find the first number that is the product of two given numbers. How would you do it?\n\n# Problem 14:\n\nYou have a list of numbers and you want to find the first number that is the difference of two given numbers. How would you do it?\n\n# Problem 15:\n\nYou have a list of numbers and you want to find the first number that is the ratio of two given numbers. How would you do it?\n\n# Problem 16:\n\nYou have a list of numbers and you want to find the first number that is the root of a given number. How would you do it?\n\n# Problem 17:\n\nYou have a list of numbers and you want to find the first number that is the power of a given number. How would you do it?\n\n# Problem 18:\n\nYou have a list of numbers and you want to find the first number that is the square of a given number. How would you do it?\n\n# Problem 19:\n\nYou have a list of numbers and you want to find the first number that is the cube of a given number. How would you do it?\n\n# Problem 20:\n\nYou have a list of numbers and you want to find the first number that is the nth number in the list. How would you do it?\n\n# Problem 21:\n\nYou have a list of numbers and you want to find the first number that is the sum of all the numbers in the list. How would you do it?\n\n# Problem 22:\n\nYou have a list of numbers and you want to find the first number that is the product of all the numbers in the list. How would you do it?\n\n# Problem 23:\n\nYou have a list of numbers and you want to find the first number that is the average of all the numbers in the list. How would you do it?\n\n# Problem 24:\n\nYou have a list of numbers and you want to find the first number that is the median of all the numbers in the list. How would you do it?\n\n# Problem 25:\n\nYou have a list of numbers and you want to find the first number that is the mode of all the numbers in the list. How would you do it?\n\n# Problem 26:\n\nYou have a list of numbers and you want to find the first number that is the standard deviation of all the numbers in the list. How would"
    ]
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cstddef>\n#include <cstdarg>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cstddef>\n#include <cstdbool>\n#include <cstdint>\n#include <cstdfloat>\n#include <cstddouble>\n#include <cstdlong>\n#include <cstdshort>\n#include <cstdbyte>\n#include <cstd_iostream>\n#include <cstd_string>\n#include <cstd_vector>\n#include <cstd_array>\n#include <cstd_list>\n#include <cstd_map>\n#include <cstd_set>\n#include <cstd_unordered_map>\n#include <cstd_unordered_set>\n#include <cstd_pair>\n#include <cstd_tuple>\n#include <cstd_function>\n#include <cstd_bind>\n#include <cstd_placeholders>\n#include <cstd_algorithm>\n#include <cstd_numeric>\n#include <cstd_chrono>\n#include <cstd_ratio>\n#include <cstd_iostream>\n#include <cstd_string>\n#include <cstd_vector>\n#include <cstd_array>\n#include <cstd_list>\n#include <cstd_map>\n#include <cstd_set>\n#include <cstd_unordered_map>\n#include <cstd_unordered_set>\n#include <cstd_pair>\n#include <cstd_tuple>\n#include <cstd_function>\n#include <cstd_bind>\n#include <cstd_placeholders>\n#include <cstd_algorithm>\n#include <cstd_numeric>\n#include <cstd_chrono>\n#include <cstd_ratio>\n#include <cstd_iostream>\n#include <cstd_string>\n#include <cstd_vector>\n#include <cstd_array>\n#include <cstd_list>\n#include <cstd_map>\n#include <cstd_set>\n#include <cstd_unordered_map>\n#include <cstd_unordered_set>\n#include <cstd_pair>\n#include <cstd_tuple>\n#include <cstd_function>\n#include <cstd_bind>\n#include <cstd_placeholders>\n#include <cstd_algorithm>\n#include <cstd_numeric>\n#include <cstd_chrono>\n#include <cstd_ratio>\n#include <cstd_iostream>\n#include <cstd_string>\n#include <cstd_vector>\n#include <cstd_array>\n#include <cstd_list>\n#include <cstd_map>\n#include <cstd_set>\n#include <cstd_unordered_map>\n#include <cstd_unordered_set>\n#include <cstd_pair>\n#include <cstd_tuple>\n#include <cstd_function>\n#include <cstd_bind>\n#include <cstd_placeholders>\n#include <cstd_algorithm>\n#include <cstd_numeric>\n#include <cstd_chrono>\n#include <cstd_ratio>\n#include <cstd_iostream>\n#include <cstd_string>\n#include <cstd_vector>\n#include <cstd_array>\n#include <cstd_list>\n#include <cstd_map>\n#include <cstd_set>\n#include <cstd_unordered_map>\n#include <cstd_unordered_set>\n#include <cstd_pair>\n#include <cstd_tuple>\n#include <cstd_function>\n#include <cstd_bind>\n#include <cstd_placeholders>\n#include <cstd_algorithm>\n#include <cstd_numeric>\n#include <cstd_chrono>\n#include <cstd_ratio>\n#include <cstd_iostream>\n#include <c"
    ]
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                swap(arr[i], arr[j]);\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        cout << arr[i] << \" \";\n    }\n    return 0;\n}\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\n// This is the solution\n\nThe above code is a C++ program that sorts the given array of integers using the insertion sort algorithm. The program first reads an integer 'n' from the user, which represents the size of the array. Then, it creates an array of integers of size 'n' and reads the elements of the array from the user.\n\nAfter that, it uses a nested loop to sort the array. The outer loop iterates over the elements of the array, and the inner loop iterates over the remaining elements of the array, starting from the current element's index + 1. If the current element is greater than the current element of the inner loop, the two elements are swapped using the swap function.\n\nFinally, the program prints the sorted array.\n\nThe time complexity of this algorithm is O(n^2) in the worst case, since the inner loop iterates over the entire array for each element of the outer loop. However, the average case time complexity is O(n log n) because the inner loop only iterates over the remaining elements of the array, and the outer loop only iterates over the elements that are greater than the current element."
    ]
  },
  {
    "id": "ProntoQA_9",
    "context": "Every dumpus is not shy. Each dumpus is a tumpus. Rompuses are not wooden. Tumpuses are opaque. Every tumpus is a wumpus. Wumpuses are not floral. Each wumpus is an impus. Impuses are bitter. Every impus is a vumpus. Vumpuses are small. Each vumpus is a numpus. Every numpus is wooden. Each numpus is a yumpus. Each yumpus is orange. Each yumpus is a jompus. Each jompus is amenable. Every jompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is wooden.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "Predicates:\nDumpus($x, bool) ::: Does x belong to Dumpus?\nTumpus($x, bool) ::: Does x belong to Tumpus?\nRompuses($x, bool) ::: Does x belong to Rompuses?\nWooden($x, bool) ::: Is x wooden?\nOpaque($x, bool) ::: Is x opaque?\nWumpus($x, bool) ::: Does x belong to Wumpus?\nFloral($x, bool) ::: Is x floral?\nImpus($x, bool) ::: Does x belong to Impus?\nBitter($x, bool) ::: Is x bitter?\nVumpus($x, bool) ::: Does x belong to Vumpus?\nSmall($x, bool) ::: Is x small?\nNumpus($x, bool) ::: Does x belong to Numpus?\nWooden($x, bool) ::: Is x wooden?\nYumpus($x, bool) ::: Does x belong to Yumpus?\nOrange($x, bool) ::: Is x orange?\nJompus($x, bool) ::: Does x belong to Jompus?\nAmenable($x, bool) ::: Is x amenable?\nZumpus($x, bool) ::: Does x belong to Zumpus?\nFacts:\nTumpuses(Wren, True)\nRules:\nDumpus($x, True) >>> Tumpus($x, True)\nDumpus($x, True) >>> Rompuses($x, True)\nRompuses($x, True) >>> Wooden($x, False)\nRompuses($x, True) >>> Opaque($x, True)\nWumpus($x, True) >>> Tumpus($x, True)\nWumpus($x, True) >>> Floral($x, False)\nImpus($x, True) >>> Bitter($x, True)\nImpus($x, True) >>> Vumpus($x, True)\nVumpus($x, True) >>> Small($x, True)\nNumpus($x, True) >>> Dumpus($x, True)\nNumpus($x, True) >>> Wooden($x, True)\nYumpus($x, True) >>> Orange($x, True)\nYumpus($x, True) >>> Jompus($x, True)\nJompus($x, True) >>> Amenable($x, True)\nZumpus($x, True) >>> Tumpus($x, True)\nQuery:\nWooden(Wren, False)\n------\n\nPlease help me with the above two questions.\n\nThank you."
    ]
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False"
    ],
    "raw_logic_programs": [
      "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cstdint>\n#include <cstdio>\n#include <cstddef>\n#include <cstdarg>\n#include <cstring>\n#include <cstdlib>\n#include <cstdbool>\n#include <cstddef>\n#include <cstdint>\n#include <cstdalign>\n#include <cstdsize>\n#include <cstdratio>\n#include <cstdcomplex>\n#include <cstdarray>\n#include <cstdset>\n#include <cstdmap>\n#include <cstdunordered_map>\n#include <cstdunordered_set>\n#include <cstdpair>\n#include <cstdlist>\n#include <cstdforward_list>\n#include <cstddeque>\n#include <cstdqueue>\n#include <cstdstack>\n#include <cstdvector>\n#include <cstditer>\n#include <cstdnumeric>\n#include <cstdvalarray>\n#include <cstdbitset>\n#include <cstdstring_view>\n#include <cstdchrono>\n#include <cstdratio>\n#include <cstdtime>\n#include <cstdcmath>\n#include <cstdlib_h>\n#include <cstdint_h>\n#include <cstdbool_h>\n#include <cstddef_h>\n#include <cstdalign_h>\n#include <cstdsize_h>\n#include <cstdratio_h>\n#include <cstdcomplex_h>\n#include <cstdarray_h>\n#include <cstdset_h>\n#include <cstdmap_h>\n#include <cstdunordered_map_h>\n#include <cstdunordered_set_h>\n#include <cstdpair_h>\n#include <cstdlist_h>\n#include <cstdforward_list_h>\n#include <cstddeque_h>\n#include <cstdqueue_h>\n#include <cstdstack_h>\n#include <cstdvector_h>\n#include <cstditer_h>\n#include <cstdnumeric_h>\n#include <cstdvalarray_h>\n#include <cstdbitset_h>\n#include <cstdstring_view_h>\n#include <cstdchrono_h>\n#include <cstdratio_h>\n#include <cstdtime_h>\n#include <cstdcmath_h>\n#include <cstdlib_h>\n#include <cstdint_h>\n#include <cstdbool_h>\n#include <cstddef_h>\n#include <cstdalign_h>\n#include <cstdsize_h>\n#include <cstdratio_h>\n#include <cstdcomplex_h>\n#include <cstdarray_h>\n#include <cstdset_h>\n#include <cstdmap_h>\n#include <cstdunordered_map_h>\n#include <cstdunordered_set_h>\n#include <cstdpair_h>\n#include <cstdlist_h>\n#include <cstdforward_list_h>\n#include <cstddeque_h>\n#include <cstdqueue_h>\n#include <cstdstack_h>\n#include <cstdvector_h>\n#include <cstditer_h>\n#include <cstdnumeric_h>\n#include <cstdvalarray_h>\n#include <cstdbitset_h>\n#include <cstdstring_view_h>\n#include <cstdchrono_h>\n#include <cstdratio_h>\n#include <cstdtime_h>\n#include <cstdcmath_h>\n#include <cstdlib_h>\n#include <cstdint_h>\n#include <cstdbool_h>\n#include <cstddef_h>\n#include <cstdalign_h>\n#include <cstdsize_h>\n#include <cstdratio_h>\n#include <"
    ]
  }
]