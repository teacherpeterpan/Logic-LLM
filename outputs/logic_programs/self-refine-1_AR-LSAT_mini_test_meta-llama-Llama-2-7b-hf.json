[
  {
    "id": "ar_lsat_200010_3-G_1_1",
    "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
    "question": "Which one of the following could be the schedule of the students' reports?",
    "answer": "C",
    "options": [
      "A) Mon. morning: Helen; Mon. afternoon: Robert Tues. morning: Olivia; Tues. afternoon: Irving Wed. morning: Lenore; Wed. afternoon: Kyle",
      "B) Mon. morning: Irving; Mon. afternoon: Olivia Tues. morning: Helen; Tues. afternoon: Kyle Wed. morning: Nina; Wed. afternoon: Lenore",
      "C) Mon. morning: Lenore; Mon. afternoon: Helen Tues. morning: George; Tues. afternoon: Kyle Wed. morning: Robert; Wed. afternoon: Irving",
      "D) Mon. morning: Nina; Mon. afternoon: Helen Tues. morning: Robert; Tues. afternoon: Irving Wed. morning: Olivia; Wed. afternoon: Lenore",
      "E) Mon. morning: Olivia; Mon. afternoon: Nina Tues. morning: Irving; Tues. afternoon: Helen Wed. morning: Kyle; Wed. afternoon: George"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([George, Helen, Irving, Kyle, Lenore, Nina, Olivia, Robert])\nreports = EnumSort([morning, afternoon])\ngiven = Function([students, reports] -> [bool])\n\n# Constraints\nForAll([r:reports], And(given(students, r) == 1, given(students, r) <= 2)) ::: exactly two reports will be given each day—one in the morning and one in the afternoon\nAnd(given(George, morning) == True, given(George, afternoon) == False) ::: Tuesday is the only day on which George can give a report\nAnd(given(Olivia, afternoon) == False, given(Robert, afternoon) == False) ::: Neither Olivia nor Robert can give an afternoon report\nAnd(given(Nina, morning) == True, given(Helen, afternoon) == True, given(Irving, afternoon) == True) ::: If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday\n\n# Options\nQuestion ::: ::: Which one of the following could be the schedule of the students' reports?\nis_sat(ForAll([r:reports], And(given(students, r) == 1, given(students, r) <= 2))) ::: (A)\nis_sat(ForAll([r:reports], And(given(students, r) == 1, given(students, r) <= 2))) ::: (B)\nis_sat(ForAll([r:reports], And(given(students, r) == 1, given(students, r) <= 2))) ::: (C)\nis_sat(ForAll([r:reports], And(given(students, r) == 1, given(students, r) <= 2))) ::: (D)\nis_sat(ForAll([r:reports], And(given(students, r) == 1, given(students, r) <= 2))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_1_2",
    "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
    "question": "If Kyle and Lenore do not give reports, then the morning reports on Monday, Tuesday, and Wednesday, respectively, could be given by",
    "answer": "D",
    "options": [
      "A) Helen, George, and Nina",
      "B) Irving, Robert, and Helen",
      "C) Nina, Helen, and Olivia",
      "D) Olivia, Robert, and Irving",
      "E) Robert, George, and Helen"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([George, Helen, Irving, Kyle, Lenore, Nina, Olivia, Robert])\nreports = EnumSort([morning, afternoon])\ngiven = Function([students, reports] -> [bool])\n\n# Constraints\nForAll([r:reports], And(1 <= given(students, r), given(students, r) <= 2)) ::: exactly two reports will be given each day—one in the morning and one in the afternoon\nAnd(given(George, morning) == True, given(George, afternoon) == False) ::: Tuesday is the only day on which George can give a report\nAnd(given(Olivia, afternoon) == False, given(Robert, afternoon) == False) ::: Neither Olivia nor Robert can give an afternoon report\nAnd(given(Nina, morning) == True, given(Helen, afternoon) == True, given(Irving, afternoon) == True) ::: If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday\n\n# Options\nQuestion ::: ::: If Kyle and Lenore do not give reports, then the morning reports on Monday, Tuesday, and Wednesday, respectively, could be given by\nis_sat(ForAll([r:reports], And(given(students, r) == [A, B, C]))) ::: (A)\nis_sat(ForAll([r:reports], And(given(students, r) == [B, C, A]))) ::: (B)\nis_sat(ForAll([r:reports], And(given(students, r) == [C, A, B]))) ::: (C)\nis_sat(ForAll([r:reports], And(given(students, r) == [A, B, C]))) ::: (D)\nis_sat(ForAll([r:reports], And(given(students, r) == [B, C, A]))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_1_3",
    "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
    "question": "Which one of the following is a pair of students who, if they give reports on the same day as each other, must give reports on Wednesday?",
    "answer": "B",
    "options": [
      "A) George and Lenore",
      "B) Helen and Nina",
      "C) Irving and Robert",
      "D) Kyle and Nina",
      "E) Olivia and Kyle"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([George, Helen, Irving, Kyle, Lenore, Nina, Olivia, Robert])\ndays = EnumSort([Monday, Tuesday, Wednesday])\nreports = Function([students, days] -> [bool])\n\n# Constraints\nForAll([d:days], Count([s:students], And(reports(s, d) == True, reports(s, d + 1) == False))) ::: exactly two reports will be given each day—one in the morning and one in the afternoon\nAnd(reports(George, Tuesday), reports(George, Wednesday) == False) ::: Tuesday is the only day on which George can give a report\nAnd(reports(Olivia, Tuesday), reports(Olivia, Wednesday) == False) ::: Neither Olivia nor Robert can give an afternoon report\nAnd(reports(Nina, Tuesday), reports(Nina, Wednesday) == False) ::: If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday\n\n# Options\nQuestion ::: ::: Which one of the following is a pair of students who, if they give reports on the same day as each other, must give reports on Wednesday?\nis_sat(ForAll([d:days], reports(George, d) == reports(Lenore, d))) ::: (A)\nis_sat(ForAll([d:days], reports(Helen, d) == reports(Nina, d))) ::: (B)\nis_sat(ForAll([d:days], reports(Irving, d) == reports(Robert, d))) ::: (C)\nis_sat(ForAll([d:days], reports(Kyle, d) == reports(Nina, d))) ::: (D)\nis_sat(ForAll([d:days], reports(Olivia, d) == reports(Kyle, d))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_1_4",
    "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
    "question": "If George, Nina, and Robert give reports and they do so on different days from one another, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Helen gives a report on Wednesday.",
      "B) Nina gives a report on Monday.",
      "C) Nina gives a report on Tuesday.",
      "D) Olivia gives a report on Monday.",
      "E) Robert gives a report on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([George, Helen, Irving, Kyle, Lenore, Nina, Olivia, Robert])\ndays = EnumSort([Monday, Tuesday, Wednesday])\nreports = Function([students, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= reports(George, d), reports(George, d) <= 8))\nForAll([d:days], And(1 <= reports(Nina, d), reports(Nina, d) <= 8))\nForAll([d:days], And(1 <= reports(Robert, d), reports(Robert, d) <= 8))\nForAll([d:days], And(1 <= reports(Olivia, d), reports(Olivia, d) <= 8))\nForAll([d:days], And(1 <= reports(Helen, d), reports(Helen, d) <= 8))\nForAll([d:days], And(1 <= reports(Irving, d), reports(Irving, d) <= 8))\nForAll([d:days], And(1 <= reports(Kyle, d), reports(Kyle, d) <= 8))\nForAll([d:days], And(1 <= reports(Lenore, d), reports(Lenore, d) <= 8))\nForAll([d:days], And(1 <= reports(Nina, d), reports(Nina, d) <= 8))\nForAll([d:days], And(1 <= reports(Olivia, d), reports(Olivia, d) <= 8))\nForAll([d:days], And(1 <= reports(Robert, d), reports(Robert, d) <= 8))\nForAll([d:days], And(1 <= reports(Helen, d), reports(Helen, d) <= 8))\nForAll([d:days], And(1 <= reports(Irving, d), reports(Irving, d) <= 8))\nForAll([d:days], And(1 <= reports(Kyle, d), reports(Kyle, d) <= 8))\nForAll([d:days], And(1 <= reports(Lenore, d), reports(Lenore, d) <= 8))\nForAll([d:days], And(1 <= reports(Nina, d), reports(Nina, d) <= 8))\nForAll([d:days], And(1 <= reports(Olivia, d), reports(Olivia, d) <= 8))\nForAll([d:days], And(1 <= reports(Robert, d), reports(Robert, d) <= 8))\nForAll([d:days], And(1 <= reports(Helen, d), reports(Helen, d) <= 8))\nForAll([d:days], And(1 <= reports(Irving, d), reports(Irving, d) <= 8))\nForAll([d:days], And(1 <= reports(Kyle, d), reports(Kyle, d) <= 8))\nForAll([d:days], And(1 <= reports(Lenore, d), reports(Lenore, d) <= 8))\nForAll([d:days], And(1 <= reports(Nina, d), reports(Nina, d) <= 8))\nForAll([d:days], And(1 <= reports(Olivia, d), reports(Olivia, d) <= 8))\nForAll([d:days], And(1 <= reports(Robert, d), reports(Robert, d) <= 8))\nForAll([d:days], And(1 <= reports(Helen, d), reports(Helen, d) <= 8))\nForAll([d:days], And(1 <= reports(Irving, d), reports(Irving, d) <= 8))\nForAll([d:days], And(1 <= reports(Kyle, d), reports(Kyle, d) <= 8))\nForAll([d:days], And(1 <= reports(Lenore, d), reports(Lenore, d) <= 8))\nForAll([d:days], And(1 <= reports(Nina, d), reports(Nina, d) <= 8))\nForAll([d:days], And(1 <= reports(Olivia, d), reports(Olivia, d) <= 8))"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_1_5",
    "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
    "question": "If Kyle gives the afternoon report on Tuesday, and Helen gives the afternoon report on Wednesday, which one of the following could be the list of the students who give the morning reports on Monday, Tuesday, and Wednesday, respectively?",
    "answer": "D",
    "options": [
      "A) Irving, Lenore, and Nina",
      "B) Lenore, George, and Irving",
      "C) Nina, Irving, and Lenore",
      "D) Robert, George, and Irving",
      "E) Robert, Irving, and Lenore"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([George, Helen, Irving, Kyle, Lenore, Nina, Olivia, Robert])\nreports = EnumSort([morning, afternoon])\ngiven = Function([students, reports] -> [bool])\n\n# Constraints\nForAll([r:reports], And(1 <= given(students, r), given(students, r) <= 2)) ::: exactly two reports will be given each day—one in the morning and one in the afternoon\nAnd(given(George, morning) == False, given(George, afternoon) == True) ::: Tuesday is the only day on which George can give a report\nAnd(given(Olivia, afternoon) == False, given(Robert, afternoon) == True) ::: Neither Olivia nor Robert can give an afternoon report\nAnd(given(Nina, morning) == True, given(Helen, morning) == True, given(Irving, morning) == True) ::: If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday\n\n# Options\nQuestion ::: ::: If Kyle gives the afternoon report on Tuesday, and Helen gives the afternoon report on Wednesday, which one of the following could be the list of the students who give the morning reports on Monday, Tuesday, and Wednesday, respectively?\nis_exception(is_sat(given(Irving, morning) == True)) ::: (A)\nis_exception(is_sat(given(Lenore, morning) == True)) ::: (B)\nis_exception(is_sat(given(Nina, morning) == True)) ::: (C)\nis_exception(is_sat(given(Robert, morning) == True)) ::: (D)\nis_exception(is_sat(given(George, morning) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_1_6",
    "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
    "question": "If Helen, Kyle, and Lenore, not necessarily in that order, give the three morning reports, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Helen gives a report on Monday.",
      "B) Irving gives a report on Monday.",
      "C) Irving gives a report on Wednesday.",
      "D) Kyle gives a report on Tuesday.",
      "E) Kyle gives a report on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([George, Helen, Irving, Kyle, Lenore, Nina, Olivia, Robert])\nreports = EnumSort([morning, afternoon])\ngiven = Function([students, reports] -> [bool])\n\n# Constraints\nForAll([r:reports], And(1 <= given(George, r), given(George, r) <= 2)) ::: Tuesday is the only day on which George can give a report\nForAll([r:reports], And(1 <= given(Olivia, r), given(Olivia, r) <= 2)) ::: Neither Olivia nor Robert can give an afternoon report\nForAll([r:reports], And(1 <= given(Nina, r), given(Nina, r) <= 2)) ::: If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday\nForAll([r:reports], And(1 <= given(Helen, r), given(Helen, r) <= 2)) ::: Helen, Kyle, and Lenore, not necessarily in that order, give the three morning reports\n\n# Options\nQuestion ::: If Helen, Kyle, and Lenore, not necessarily in that order, give the three morning reports, which one of the following must be true?\nis_exception(is_sat(given(Helen, morning) == 1)) ::: (A)\nis_exception(is_sat(given(Irving, morning) == 1)) ::: (B)\nis_exception(is_sat(given(Irving, afternoon) == 1)) ::: (C)\nis_exception(is_sat(given(Kyle, afternoon) == 1)) ::: (D)\nis_exception(is_sat(given(Kyle, morning) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_2_7",
    "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.",
    "question": "Which one of the following could be the organizer's selection of works?",
    "answer": "C",
    "options": [
      "A) one French novel, two Russian novels, one French play, one Russian play",
      "B) two French novels, one Russian novel, two French plays, one Russian play",
      "C) two French novels, two Russian novels, two French plays",
      "D) three French novels, one Russian novel, two French plays",
      "E) three French novels, two Russian novels, one Russian play"
    ],
    "raw_logic_programs": [
      "# Declarations\nworks = EnumSort([French, Russian])\nnovels = EnumSort([novel, play])\nplays = EnumSort([play])\n\n# Constraints\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: No more than four French works are selected\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: No more than four novels are selected\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: At least as many French novels as Russian novels are selected\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: If both French plays are selected, then the Russian play is not selected\n\n# Options\nQuestion ::: Which one of the following could be the organizer's selection of works?\nis_valid(Exists([w:works], And(w == French, w == novel, w == play))) ::: (A)\nis_valid(Exists([w:works], And(w == French, w == novel, w == play))) ::: (B)\nis_valid(Exists([w:works], And(w == French, w == novel, w == play))) ::: (C)\nis_valid(Exists([w:works], And(w == French, w == novel, w == play))) ::: (D)\nis_valid(Exists([w:works], And(w == French, w == novel, w == play))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_2_8",
    "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.",
    "question": "Which one of the following could be true about the organizer's selection of works?",
    "answer": "A",
    "options": [
      "A) No Russian novels are selected.",
      "B) Exactly one French novel is selected.",
      "C) All three plays are selected.",
      "D) All three Russian novels are selected.",
      "E) All five French works are selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nworks = EnumSort([French_novel, French_play, Russian_novel, Russian_play])\nnovels = EnumSort([French_novel, Russian_novel])\nplays = EnumSort([French_play, Russian_play])\nselected = Function([works] -> [bool])\n\n# Constraints\nForAll([w:works], And(1 <= selected(w), selected(w) <= 9))\nForAll([w:works], Implies(selected(w), selected(w) == 0))\nForAll([w:works], Implies(selected(w), selected(w) == 1))\nForAll([w:works], Implies(selected(w), selected(w) == 2))\nForAll([w:works], Implies(selected(w), selected(w) == 3))\nForAll([w:works], Implies(selected(w), selected(w) == 4))\nForAll([w:works], Implies(selected(w), selected(w) == 5))\nForAll([w:works], Implies(selected(w), selected(w) == 6))\nForAll([w:works], Implies(selected(w), selected(w) == 7))\nForAll([w:works], Implies(selected(w), selected(w) == 8))\nForAll([w:works], Implies(selected(w), selected(w) == 9))\n\n# Options\nQuestion ::: Which one of the following could be true about the organizer's selection of works?\nis_exception(is_sat(selected(French_novel) == 0)) ::: (A)\nis_exception(is_sat(selected(French_novel) == 1)) ::: (B)\nis_exception(is_sat(selected(French_novel) == 2)) ::: (C)\nis_exception(is_sat(selected(French_novel) == 3)) ::: (D)\nis_exception(is_sat(selected(French_novel) == 4)) ::: (E)\nis_exception(is_sat(selected(French_novel) == 5)) ::: (F)\nis_exception(is_sat(selected(French_novel) == 6)) ::: (G)\nis_exception(is_sat(selected(French_novel) == 7)) ::: (H)\nis_exception(is_sat(selected(French_novel) == 8)) ::: (I)\nis_exception(is_sat(selected(French_novel) == 9)) ::: (J)\nis_exception(is_sat(selected(French_play) == 0)) ::: (K)\nis_exception(is_sat(selected(French_play) == 1)) ::: (L)\nis_exception(is_sat(selected(French_play) == 2)) ::: (M)\nis_exception(is_sat(selected(French_play) == 3)) ::: (N)\nis_exception(is_sat(selected(French_play) == 4)) ::: (O)\nis_exception(is_sat(selected(French_play) == 5)) ::: (P)\nis_exception(is_sat(selected(French_play) == 6)) ::: (Q)\nis_exception(is_sat(selected(French_play) == 7)) ::: (R)\nis_exception(is_sat(selected(French_play) == 8)) ::: (S)\nis_exception(is_sat(selected(French_play) == 9)) ::: (T)\nis_exception(is_sat(selected(Russian_novel) == 0)) ::: (U)\nis_exception(is_sat(selected(Russian_novel) == 1)) ::: (V)\nis_exception(is_sat(selected(Russian_novel) == 2)) ::: (W)\nis_exception(is_sat(selected(Russian_novel) == 3)) ::: (X)\nis_exception(is_sat(selected(Russian_novel) == 4)) :"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_2_9",
    "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.",
    "question": "If the works selected include three French novels, which one of the following could be a complete and accurate list of the remaining works selected?",
    "answer": "C",
    "options": [
      "A) one Russian novel",
      "B) two French plays",
      "C) one Russian novel, one Russian play",
      "D) one Russian novel, two French plays",
      "E) two Russian novels, one French play"
    ],
    "raw_logic_programs": [
      "# Declarations\nworks = EnumSort([French_novel, French_play, Russian_novel, Russian_play])\nselected = Function([works] -> [bool])\n\n# Constraints\nForAll([w:works], And(1 <= selected(w), selected(w) <= 9))\nForAll([w:works], Implies(selected(w), selected(w) == 0))\nForAll([w:works], Implies(selected(w), selected(w) == 1))\nForAll([w:works], Implies(selected(w), selected(w) == 2))\nForAll([w:works], Implies(selected(w), selected(w) == 3))\nForAll([w:works], Implies(selected(w), selected(w) == 4))\nForAll([w:works], Implies(selected(w), selected(w) == 5))\nForAll([w:works], Implies(selected(w), selected(w) == 6))\nForAll([w:works], Implies(selected(w), selected(w) == 7))\nForAll([w:works], Implies(selected(w), selected(w) == 8))\nForAll([w:works], Implies(selected(w), selected(w) == 9))\n\n# Options\nQuestion ::: If the works selected include three French novels, which one of the following could be a complete and accurate list of the remaining works selected?\nis_exception(is_sat(selected(French_novel) == 3)) ::: (A)\nis_exception(is_sat(selected(French_play) == 2)) ::: (B)\nis_exception(is_sat(selected(French_play) == 1)) ::: (C)\nis_exception(is_sat(selected(Russian_novel) == 1)) ::: (D)\nis_exception(is_sat(selected(Russian_play) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200010_3-G_2_10",
    "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.",
    "question": "The organizer must at least select",
    "answer": "D",
    "options": [
      "A) one French novel and one French play",
      "B) one French novel and one Russian play",
      "C) one Russian novel and one French play",
      "D) two French novels",
      "E) two Russian novels"
    ],
    "raw_logic_programs": [
      "# Declarations\nworks = EnumSort([French_novel, French_play, Russian_novel, Russian_play])\nnovels = EnumSort([French_novel, Russian_novel])\nplays = EnumSort([French_play, Russian_play])\n\n# Constraints\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: No more than four French works are selected\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: No more than four novels are selected\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: At least as many French novels as Russian novels are selected\nForAll([w:works], And(1 <= Count([n:novels], w == n), Count([n:novels], w == n) <= 4)) ::: If both French plays are selected, then the Russian play is not selected\n\n# Options\nQuestion ::: The organizer must at least select\nis_valid(Exists([w:works], And(w == French_novel, w == French_play))) ::: (A)\nis_valid(Exists([w:works], And(w == French_novel, w == Russian_play))) ::: (B)\nis_valid(Exists([w:works], And(w == Russian_novel, w == French_play))) ::: (C)\nis_valid(Exists([w:works], And(w == Russian_novel, w == Russian_play))) ::: (D)\nis_valid(Exists([w:works], And(w == French_novel, w == French_novel))) ::: (E)\n------"
    ]
  }
]